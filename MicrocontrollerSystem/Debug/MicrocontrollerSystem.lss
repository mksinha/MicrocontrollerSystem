
MicrocontrollerSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c3a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000c3a  00000cae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028e0  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c1a  00000000  00000000  00003798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000846  00000000  00000000  000043b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000484  00000000  00000000  00004bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b7d  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000191c  00000000  00000000  00005bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  00007515  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 75 04 	call	0x8ea	; 0x8ea <main>
  7a:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_ZN8Integral6Device9setStatusENS_3PINEb>:
					break;
			}
		}
		else if (state == false)
		{
			switch(port)
  82:	66 23       	and	r22, r22
  84:	09 f4       	brne	.+2      	; 0x88 <_ZN8Integral6Device9setStatusENS_3PINEb+0x6>
  86:	43 c0       	rjmp	.+134    	; 0x10e <_ZN8Integral6Device9setStatusENS_3PINEb+0x8c>
			{
				case IOPORTA:
					DDRA &= ~(1 << pin);
  88:	88 30       	cpi	r24, 0x08	; 8
  8a:	68 f4       	brcc	.+26     	; 0xa6 <_ZN8Integral6Device9setStatusENS_3PINEb+0x24>
  8c:	4b b3       	in	r20, 0x1b	; 27
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	b9 01       	movw	r22, r18
  94:	02 c0       	rjmp	.+4      	; 0x9a <_ZN8Integral6Device9setStatusENS_3PINEb+0x18>
  96:	66 0f       	add	r22, r22
  98:	77 1f       	adc	r23, r23
  9a:	8a 95       	dec	r24
  9c:	e2 f7       	brpl	.-8      	; 0x96 <_ZN8Integral6Device9setStatusENS_3PINEb+0x14>
					break;
  9e:	cb 01       	movw	r24, r22
				case IOPORTB:
					DDRB &= ~(1 << pin);
  a0:	84 2b       	or	r24, r20
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	08 95       	ret
  a6:	98 ef       	ldi	r25, 0xF8	; 248
  a8:	98 0f       	add	r25, r24
  aa:	98 30       	cpi	r25, 0x08	; 8
  ac:	68 f4       	brcc	.+26     	; 0xc8 <_ZN8Integral6Device9setStatusENS_3PINEb+0x46>
  ae:	48 b3       	in	r20, 0x18	; 24
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	b9 01       	movw	r22, r18
					break;
  b6:	02 c0       	rjmp	.+4      	; 0xbc <_ZN8Integral6Device9setStatusENS_3PINEb+0x3a>
				case IOPORTC:
					DDRC &= ~(1 << pin);
  b8:	66 0f       	add	r22, r22
  ba:	77 1f       	adc	r23, r23
  bc:	9a 95       	dec	r25
  be:	e2 f7       	brpl	.-8      	; 0xb8 <_ZN8Integral6Device9setStatusENS_3PINEb+0x36>
  c0:	cb 01       	movw	r24, r22
  c2:	84 2b       	or	r24, r20
  c4:	88 bb       	out	0x18, r24	; 24
  c6:	08 95       	ret
  c8:	90 ef       	ldi	r25, 0xF0	; 240
  ca:	98 0f       	add	r25, r24
  cc:	98 30       	cpi	r25, 0x08	; 8
					break;
  ce:	68 f4       	brcc	.+26     	; 0xea <_ZN8Integral6Device9setStatusENS_3PINEb+0x68>
				case IOPORTD:
					DDRD &= ~(1 << pin);
  d0:	45 b3       	in	r20, 0x15	; 21
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	b9 01       	movw	r22, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <_ZN8Integral6Device9setStatusENS_3PINEb+0x5c>
  da:	66 0f       	add	r22, r22
  dc:	77 1f       	adc	r23, r23
  de:	9a 95       	dec	r25
  e0:	e2 f7       	brpl	.-8      	; 0xda <_ZN8Integral6Device9setStatusENS_3PINEb+0x58>
  e2:	cb 01       	movw	r24, r22
  e4:	84 2b       	or	r24, r20
  e6:	85 bb       	out	0x15, r24	; 21
			if (pin >= IOPINA0 && pin <= IOPINA7)
				PORTA |= 1 << (pin - IOPORTA);
			else if (pin >= IOPINB0 && pin <= IOPINB7)
				PORTB |= 1 << (pin - IOPORTB);
			else if (pin >= IOPINC0 && pin <= IOPINC7)
				PORTC |= 1 << (pin - IOPORTC);
  e8:	08 95       	ret
			else if (pin >= IOPIND0 && pin <= IOPIND7)
  ea:	98 ee       	ldi	r25, 0xE8	; 232
  ec:	98 0f       	add	r25, r24
  ee:	98 30       	cpi	r25, 0x08	; 8
  f0:	08 f0       	brcs	.+2      	; 0xf4 <_ZN8Integral6Device9setStatusENS_3PINEb+0x72>
  f2:	52 c0       	rjmp	.+164    	; 0x198 <_ZN8Integral6Device9setStatusENS_3PINEb+0x116>
				PORTD |= 1 << (pin - IOPORTD);
  f4:	42 b3       	in	r20, 0x12	; 18
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	b9 01       	movw	r22, r18
  fc:	02 c0       	rjmp	.+4      	; 0x102 <_ZN8Integral6Device9setStatusENS_3PINEb+0x80>
  fe:	66 0f       	add	r22, r22
 100:	77 1f       	adc	r23, r23
 102:	9a 95       	dec	r25
 104:	e2 f7       	brpl	.-8      	; 0xfe <_ZN8Integral6Device9setStatusENS_3PINEb+0x7c>
 106:	cb 01       	movw	r24, r22
 108:	84 2b       	or	r24, r20
 10a:	82 bb       	out	0x12, r24	; 18
 10c:	08 95       	ret
		}
		else if (state == false)
		{
			if (pin >= IOPINA0 && pin <= IOPINA7)
 10e:	88 30       	cpi	r24, 0x08	; 8
 110:	70 f4       	brcc	.+28     	; 0x12e <_ZN8Integral6Device9setStatusENS_3PINEb+0xac>
				PORTA &= ~(1 << (pin - IOPORTA));
 112:	4b b3       	in	r20, 0x1b	; 27
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	b9 01       	movw	r22, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <_ZN8Integral6Device9setStatusENS_3PINEb+0x9e>
 11c:	66 0f       	add	r22, r22
 11e:	77 1f       	adc	r23, r23
 120:	8a 95       	dec	r24
 122:	e2 f7       	brpl	.-8      	; 0x11c <_ZN8Integral6Device9setStatusENS_3PINEb+0x9a>
 124:	cb 01       	movw	r24, r22
 126:	80 95       	com	r24
 128:	84 23       	and	r24, r20
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	08 95       	ret
			else if (pin >= IOPINB0 && pin <= IOPINB7)
 12e:	98 ef       	ldi	r25, 0xF8	; 248
 130:	98 0f       	add	r25, r24
 132:	98 30       	cpi	r25, 0x08	; 8
 134:	70 f4       	brcc	.+28     	; 0x152 <_ZN8Integral6Device9setStatusENS_3PINEb+0xd0>
				PORTB &= ~(1 << (pin - IOPORTB));
 136:	48 b3       	in	r20, 0x18	; 24
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	b9 01       	movw	r22, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <_ZN8Integral6Device9setStatusENS_3PINEb+0xc2>
 140:	66 0f       	add	r22, r22
 142:	77 1f       	adc	r23, r23
 144:	9a 95       	dec	r25
 146:	e2 f7       	brpl	.-8      	; 0x140 <_ZN8Integral6Device9setStatusENS_3PINEb+0xbe>
 148:	cb 01       	movw	r24, r22
 14a:	80 95       	com	r24
 14c:	84 23       	and	r24, r20
 14e:	88 bb       	out	0x18, r24	; 24
 150:	08 95       	ret
			else if (pin >= IOPINC0 && pin <= IOPINC7)
 152:	90 ef       	ldi	r25, 0xF0	; 240
 154:	98 0f       	add	r25, r24
 156:	98 30       	cpi	r25, 0x08	; 8
 158:	70 f4       	brcc	.+28     	; 0x176 <_ZN8Integral6Device9setStatusENS_3PINEb+0xf4>
				PORTC &= ~(1 << (pin - IOPORTC));
 15a:	45 b3       	in	r20, 0x15	; 21
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	b9 01       	movw	r22, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <_ZN8Integral6Device9setStatusENS_3PINEb+0xe6>
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	9a 95       	dec	r25
 16a:	e2 f7       	brpl	.-8      	; 0x164 <_ZN8Integral6Device9setStatusENS_3PINEb+0xe2>
 16c:	cb 01       	movw	r24, r22
 16e:	80 95       	com	r24
 170:	84 23       	and	r24, r20
 172:	85 bb       	out	0x15, r24	; 21
 174:	08 95       	ret
			else if (pin >= IOPIND0 && pin <= IOPIND7)
 176:	98 ee       	ldi	r25, 0xE8	; 232
 178:	98 0f       	add	r25, r24
 17a:	98 30       	cpi	r25, 0x08	; 8
 17c:	68 f4       	brcc	.+26     	; 0x198 <_ZN8Integral6Device9setStatusENS_3PINEb+0x116>
				PORTD &= ~(1 << (pin - IOPORTD));
 17e:	42 b3       	in	r20, 0x12	; 18
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	b9 01       	movw	r22, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <_ZN8Integral6Device9setStatusENS_3PINEb+0x10a>
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	9a 95       	dec	r25
 18e:	e2 f7       	brpl	.-8      	; 0x188 <_ZN8Integral6Device9setStatusENS_3PINEb+0x106>
 190:	cb 01       	movw	r24, r22
 192:	80 95       	com	r24
 194:	84 23       	and	r24, r20
 196:	82 bb       	out	0x12, r24	; 18
 198:	08 95       	ret

0000019a <_ZN8Integral6Device12setDirectionENS_3PINEb>:
		}
	}
	
	void Device::setDirection(PIN pin, bool state)
	{
		if (state == true)
 19a:	66 23       	and	r22, r22
 19c:	09 f4       	brne	.+2      	; 0x1a0 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x6>
 19e:	43 c0       	rjmp	.+134    	; 0x226 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x8c>
		{
			if (pin >= IOPINA0 && pin <= IOPINA7)
 1a0:	88 30       	cpi	r24, 0x08	; 8
 1a2:	68 f4       	brcc	.+26     	; 0x1be <_ZN8Integral6Device12setDirectionENS_3PINEb+0x24>
				DDRA |= 1 << (pin - IOPORTA);
 1a4:	4a b3       	in	r20, 0x1a	; 26
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x18>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <_ZN8Integral6Device12setDirectionENS_3PINEb+0x14>
 1b6:	cb 01       	movw	r24, r22
 1b8:	84 2b       	or	r24, r20
 1ba:	8a bb       	out	0x1a, r24	; 26
 1bc:	08 95       	ret
			else if (pin >= IOPINB0 && pin <= IOPINB7)
 1be:	98 ef       	ldi	r25, 0xF8	; 248
 1c0:	98 0f       	add	r25, r24
 1c2:	98 30       	cpi	r25, 0x08	; 8
 1c4:	68 f4       	brcc	.+26     	; 0x1e0 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x46>
				DDRB |= 1 << (pin - IOPORTB);
 1c6:	47 b3       	in	r20, 0x17	; 23
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	b9 01       	movw	r22, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x3a>
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	9a 95       	dec	r25
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x36>
 1d8:	cb 01       	movw	r24, r22
 1da:	84 2b       	or	r24, r20
 1dc:	87 bb       	out	0x17, r24	; 23
 1de:	08 95       	ret
			else if (pin >= IOPINC0 && pin <= IOPINC7)
 1e0:	90 ef       	ldi	r25, 0xF0	; 240
 1e2:	98 0f       	add	r25, r24
 1e4:	98 30       	cpi	r25, 0x08	; 8
 1e6:	68 f4       	brcc	.+26     	; 0x202 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x68>
				DDRC |= 1 << (pin - IOPORTC);
 1e8:	44 b3       	in	r20, 0x14	; 20
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	b9 01       	movw	r22, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x5c>
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	9a 95       	dec	r25
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x58>
 1fa:	cb 01       	movw	r24, r22
 1fc:	84 2b       	or	r24, r20
 1fe:	84 bb       	out	0x14, r24	; 20
 200:	08 95       	ret
			else if (pin >= IOPIND0 && pin <= IOPIND7)
 202:	98 ee       	ldi	r25, 0xE8	; 232
 204:	98 0f       	add	r25, r24
 206:	98 30       	cpi	r25, 0x08	; 8
 208:	08 f0       	brcs	.+2      	; 0x20c <_ZN8Integral6Device12setDirectionENS_3PINEb+0x72>
 20a:	52 c0       	rjmp	.+164    	; 0x2b0 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x116>
				DDRD |= 1 << (pin - IOPORTD);
 20c:	41 b3       	in	r20, 0x11	; 17
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	b9 01       	movw	r22, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <_ZN8Integral6Device12setDirectionENS_3PINEb+0x80>
 216:	66 0f       	add	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	9a 95       	dec	r25
 21c:	e2 f7       	brpl	.-8      	; 0x216 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x7c>
 21e:	cb 01       	movw	r24, r22
 220:	84 2b       	or	r24, r20
 222:	81 bb       	out	0x11, r24	; 17
 224:	08 95       	ret
		}
		else if (state == false)
		{
			if (pin >= IOPINA0 && pin <= IOPINA7)
 226:	88 30       	cpi	r24, 0x08	; 8
 228:	70 f4       	brcc	.+28     	; 0x246 <_ZN8Integral6Device12setDirectionENS_3PINEb+0xac>
				DDRA &= ~(1 << (pin - IOPORTA));
 22a:	4a b3       	in	r20, 0x1a	; 26
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	b9 01       	movw	r22, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x9e>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	8a 95       	dec	r24
 23a:	e2 f7       	brpl	.-8      	; 0x234 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x9a>
 23c:	cb 01       	movw	r24, r22
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	8a bb       	out	0x1a, r24	; 26
 244:	08 95       	ret
			else if (pin >= IOPINB0 && pin <= IOPINB7)
 246:	98 ef       	ldi	r25, 0xF8	; 248
 248:	98 0f       	add	r25, r24
 24a:	98 30       	cpi	r25, 0x08	; 8
 24c:	70 f4       	brcc	.+28     	; 0x26a <_ZN8Integral6Device12setDirectionENS_3PINEb+0xd0>
				DDRB &= ~(1 << (pin - IOPORTB));
 24e:	47 b3       	in	r20, 0x17	; 23
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	b9 01       	movw	r22, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <_ZN8Integral6Device12setDirectionENS_3PINEb+0xc2>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	9a 95       	dec	r25
 25e:	e2 f7       	brpl	.-8      	; 0x258 <_ZN8Integral6Device12setDirectionENS_3PINEb+0xbe>
 260:	cb 01       	movw	r24, r22
 262:	80 95       	com	r24
 264:	84 23       	and	r24, r20
 266:	87 bb       	out	0x17, r24	; 23
 268:	08 95       	ret
			else if (pin >= IOPINC0 && pin <= IOPINC7)
 26a:	90 ef       	ldi	r25, 0xF0	; 240
 26c:	98 0f       	add	r25, r24
 26e:	98 30       	cpi	r25, 0x08	; 8
 270:	70 f4       	brcc	.+28     	; 0x28e <_ZN8Integral6Device12setDirectionENS_3PINEb+0xf4>
				DDRC &= ~(1 << (pin - IOPORTC));
 272:	44 b3       	in	r20, 0x14	; 20
 274:	21 e0       	ldi	r18, 0x01	; 1
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	b9 01       	movw	r22, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <_ZN8Integral6Device12setDirectionENS_3PINEb+0xe6>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	9a 95       	dec	r25
 282:	e2 f7       	brpl	.-8      	; 0x27c <_ZN8Integral6Device12setDirectionENS_3PINEb+0xe2>
 284:	cb 01       	movw	r24, r22
 286:	80 95       	com	r24
 288:	84 23       	and	r24, r20
 28a:	84 bb       	out	0x14, r24	; 20
 28c:	08 95       	ret
			else if (pin >= IOPIND0 && pin <= IOPIND7)
 28e:	98 ee       	ldi	r25, 0xE8	; 232
 290:	98 0f       	add	r25, r24
 292:	98 30       	cpi	r25, 0x08	; 8
 294:	68 f4       	brcc	.+26     	; 0x2b0 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x116>
				DDRD &= ~(1 << (pin - IOPORTD));
 296:	41 b3       	in	r20, 0x11	; 17
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	b9 01       	movw	r22, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x10a>
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	9a 95       	dec	r25
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <_ZN8Integral6Device12setDirectionENS_3PINEb+0x106>
 2a8:	cb 01       	movw	r24, r22
 2aa:	80 95       	com	r24
 2ac:	84 23       	and	r24, r20
 2ae:	81 bb       	out	0x11, r24	; 17
 2b0:	08 95       	ret

000002b2 <_ZN8Integral6Device9getStatusENS_3PINE>:
		}
	}

	bool Device::getStatus(PIN pin)
	{
		if (pin >= IOPINA0 && pin <= IOPINA7)
 2b2:	88 30       	cpi	r24, 0x08	; 8
 2b4:	58 f4       	brcc	.+22     	; 0x2cc <_ZN8Integral6Device9getStatusENS_3PINE+0x1a>
			return bit_is_set(PINA, pin - IOPORTA);
 2b6:	29 b3       	in	r18, 0x19	; 25
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	a9 01       	movw	r20, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <_ZN8Integral6Device9getStatusENS_3PINE+0x10>
 2be:	55 95       	asr	r21
 2c0:	47 95       	ror	r20
 2c2:	8a 95       	dec	r24
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <_ZN8Integral6Device9getStatusENS_3PINE+0xc>
 2c6:	ca 01       	movw	r24, r20
 2c8:	81 70       	andi	r24, 0x01	; 1
 2ca:	08 95       	ret
		else if (pin >= IOPINB0 && pin <= IOPINB7)
 2cc:	98 ef       	ldi	r25, 0xF8	; 248
 2ce:	98 0f       	add	r25, r24
 2d0:	98 30       	cpi	r25, 0x08	; 8
 2d2:	58 f4       	brcc	.+22     	; 0x2ea <_ZN8Integral6Device9getStatusENS_3PINE+0x38>
			return bit_is_set(PINB, pin - IOPORTB);
 2d4:	26 b3       	in	r18, 0x16	; 22
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	a9 01       	movw	r20, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <_ZN8Integral6Device9getStatusENS_3PINE+0x2e>
 2dc:	55 95       	asr	r21
 2de:	47 95       	ror	r20
 2e0:	9a 95       	dec	r25
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <_ZN8Integral6Device9getStatusENS_3PINE+0x2a>
 2e4:	ca 01       	movw	r24, r20
 2e6:	81 70       	andi	r24, 0x01	; 1
 2e8:	08 95       	ret
		else if (pin >= IOPINC0 && pin <= IOPINC7)
 2ea:	90 ef       	ldi	r25, 0xF0	; 240
 2ec:	98 0f       	add	r25, r24
 2ee:	98 30       	cpi	r25, 0x08	; 8
 2f0:	58 f4       	brcc	.+22     	; 0x308 <_ZN8Integral6Device9getStatusENS_3PINE+0x56>
			return bit_is_set(PINC, pin - IOPORTC);
 2f2:	23 b3       	in	r18, 0x13	; 19
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	a9 01       	movw	r20, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <_ZN8Integral6Device9getStatusENS_3PINE+0x4c>
 2fa:	55 95       	asr	r21
 2fc:	47 95       	ror	r20
 2fe:	9a 95       	dec	r25
 300:	e2 f7       	brpl	.-8      	; 0x2fa <_ZN8Integral6Device9getStatusENS_3PINE+0x48>
 302:	ca 01       	movw	r24, r20
 304:	81 70       	andi	r24, 0x01	; 1
 306:	08 95       	ret
		else if (pin >= IOPIND0 && pin <= IOPIND7)
 308:	98 ee       	ldi	r25, 0xE8	; 232
 30a:	98 0f       	add	r25, r24
 30c:	98 30       	cpi	r25, 0x08	; 8
 30e:	58 f4       	brcc	.+22     	; 0x326 <_ZN8Integral6Device9getStatusENS_3PINE+0x74>
			return bit_is_set(PIND, pin - IOPORTD);
 310:	20 b3       	in	r18, 0x10	; 16
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	a9 01       	movw	r20, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <_ZN8Integral6Device9getStatusENS_3PINE+0x6a>
 318:	55 95       	asr	r21
 31a:	47 95       	ror	r20
 31c:	9a 95       	dec	r25
 31e:	e2 f7       	brpl	.-8      	; 0x318 <_ZN8Integral6Device9getStatusENS_3PINE+0x66>
 320:	ca 01       	movw	r24, r20
 322:	81 70       	andi	r24, 0x01	; 1
 324:	08 95       	ret
		else
			return false;
 326:	80 e0       	ldi	r24, 0x00	; 0
	}
 328:	08 95       	ret

0000032a <_ZN8Integral6Device9setStatusENS_4PORTEi>:
		}
	}

	void Device::setStatus(PORT port, int state)
	{
		switch(port)
 32a:	88 30       	cpi	r24, 0x08	; 8
 32c:	59 f0       	breq	.+22     	; 0x344 <_ZN8Integral6Device9setStatusENS_4PORTEi+0x1a>
 32e:	18 f4       	brcc	.+6      	; 0x336 <_ZN8Integral6Device9setStatusENS_4PORTEi+0xc>
 330:	88 23       	and	r24, r24
 332:	31 f0       	breq	.+12     	; 0x340 <_ZN8Integral6Device9setStatusENS_4PORTEi+0x16>
 334:	08 95       	ret
 336:	80 31       	cpi	r24, 0x10	; 16
 338:	39 f0       	breq	.+14     	; 0x348 <_ZN8Integral6Device9setStatusENS_4PORTEi+0x1e>
 33a:	88 31       	cpi	r24, 0x18	; 24
 33c:	39 f0       	breq	.+14     	; 0x34c <_ZN8Integral6Device9setStatusENS_4PORTEi+0x22>
 33e:	08 95       	ret
		{
			case IOPORTA:
				PORTA = state;
 340:	6b bb       	out	0x1b, r22	; 27
				break;
 342:	08 95       	ret
			case IOPORTB:
				PORTB = state;
 344:	68 bb       	out	0x18, r22	; 24
				break;
 346:	08 95       	ret
			case IOPORTC:
				PORTC = state;
 348:	65 bb       	out	0x15, r22	; 21
				break;
 34a:	08 95       	ret
			case IOPORTD:
				PORTD = state;
 34c:	62 bb       	out	0x12, r22	; 18
 34e:	08 95       	ret

00000350 <_ZN8Integral6Device12setDirectionENS_4PORTEi>:
		}
	}

	void Device::setDirection(PORT port, int state)
	{
		switch(port)
 350:	88 30       	cpi	r24, 0x08	; 8
 352:	59 f0       	breq	.+22     	; 0x36a <_ZN8Integral6Device12setDirectionENS_4PORTEi+0x1a>
 354:	18 f4       	brcc	.+6      	; 0x35c <_ZN8Integral6Device12setDirectionENS_4PORTEi+0xc>
 356:	88 23       	and	r24, r24
 358:	31 f0       	breq	.+12     	; 0x366 <_ZN8Integral6Device12setDirectionENS_4PORTEi+0x16>
 35a:	08 95       	ret
 35c:	80 31       	cpi	r24, 0x10	; 16
 35e:	39 f0       	breq	.+14     	; 0x36e <_ZN8Integral6Device12setDirectionENS_4PORTEi+0x1e>
 360:	88 31       	cpi	r24, 0x18	; 24
 362:	39 f0       	breq	.+14     	; 0x372 <_ZN8Integral6Device12setDirectionENS_4PORTEi+0x22>
 364:	08 95       	ret
		{
			case IOPORTA:
				DDRA = state;
 366:	6a bb       	out	0x1a, r22	; 26
				break;
 368:	08 95       	ret
			case IOPORTB:
				DDRB = state;
 36a:	67 bb       	out	0x17, r22	; 23
				break;
 36c:	08 95       	ret
			case IOPORTC:
				DDRC = state;
 36e:	64 bb       	out	0x14, r22	; 20
				break;
 370:	08 95       	ret
			case IOPORTD:
				DDRD = state;
 372:	61 bb       	out	0x11, r22	; 17
 374:	08 95       	ret

00000376 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE>:
		}
	}

	bool Device::getStatus(PORT port, POSITION pin)
	{
		switch(port)
 376:	88 30       	cpi	r24, 0x08	; 8
 378:	91 f0       	breq	.+36     	; 0x39e <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x28>
 37a:	18 f4       	brcc	.+6      	; 0x382 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0xc>
 37c:	88 23       	and	r24, r24
 37e:	31 f0       	breq	.+12     	; 0x38c <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x16>
 380:	29 c0       	rjmp	.+82     	; 0x3d4 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x5e>
 382:	80 31       	cpi	r24, 0x10	; 16
 384:	a9 f0       	breq	.+42     	; 0x3b0 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x3a>
 386:	88 31       	cpi	r24, 0x18	; 24
 388:	e1 f0       	breq	.+56     	; 0x3c2 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x4c>
 38a:	24 c0       	rjmp	.+72     	; 0x3d4 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x5e>
		{
			case IOPORTA:
				return bit_is_set(PINA, pin);
 38c:	89 b3       	in	r24, 0x19	; 25
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x20>
 392:	95 95       	asr	r25
 394:	87 95       	ror	r24
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x1c>
 39a:	81 70       	andi	r24, 0x01	; 1
 39c:	08 95       	ret
			case IOPORTB:
				return bit_is_set(PINB, pin);
 39e:	86 b3       	in	r24, 0x16	; 22
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x32>
 3a4:	95 95       	asr	r25
 3a6:	87 95       	ror	r24
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x2e>
 3ac:	81 70       	andi	r24, 0x01	; 1
 3ae:	08 95       	ret
			case IOPORTC:
				return bit_is_set(PINC, pin);
 3b0:	83 b3       	in	r24, 0x13	; 19
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x44>
 3b6:	95 95       	asr	r25
 3b8:	87 95       	ror	r24
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x40>
 3be:	81 70       	andi	r24, 0x01	; 1
 3c0:	08 95       	ret
			case IOPORTD:
				return bit_is_set(PIND, pin);
 3c2:	80 b3       	in	r24, 0x10	; 16
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x56>
 3c8:	95 95       	asr	r25
 3ca:	87 95       	ror	r24
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE+0x52>
 3d0:	81 70       	andi	r24, 0x01	; 1
 3d2:	08 95       	ret
			default:
				return false;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
 3d6:	08 95       	ret

000003d8 <_ZN8Integral6Keypad10initializeEv>:
		setDirection(port, 0x00);
		setStatus(port, 0x00);
	} //~Keypad

	void Keypad::initialize()
	{
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	ec 01       	movw	r28, r24
		setDirection(port, 0x0F);
 3de:	6f e0       	ldi	r22, 0x0F	; 15
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	8a 81       	ldd	r24, Y+2	; 0x02
 3e4:	0e 94 a8 01 	call	0x350	; 0x350 <_ZN8Integral6Device12setDirectionENS_4PORTEi>
		setStatus(port, 0xFF);
 3e8:	6f ef       	ldi	r22, 0xFF	; 255
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN8Integral6Device9setStatusENS_4PORTEi>
	}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <_ZN8Integral6KeypadC1ENS_4PORTE>:
#define DEBOUNCE_CONFIDFRAC 0.7

namespace Integral
{
	// default constructor
	Keypad::Keypad(PORT port)
 3f8:	2c e7       	ldi	r18, 0x7C	; 124
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	fc 01       	movw	r30, r24
 3fe:	31 83       	std	Z+1, r19	; 0x01
 400:	20 83       	st	Z, r18
	{
		this->port = port;
 402:	62 83       	std	Z+2, r22	; 0x02
		initialize();
 404:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_ZN8Integral6Keypad10initializeEv>
 408:	08 95       	ret

0000040a <_ZN8Integral6Keypad13switchPressedENS_3PINE>:
		}
		return result;
	}

	bool Keypad::switchPressed(PIN pin)
	{
 40a:	8f 92       	push	r8
 40c:	9f 92       	push	r9
 40e:	af 92       	push	r10
 410:	bf 92       	push	r11
 412:	cf 92       	push	r12
 414:	df 92       	push	r13
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	cf 93       	push	r28
 41c:	c8 2f       	mov	r28, r24
		bool result = LOW;
		for (double i = 0.0, high = 0.0; i < DEBOUNCE_MAXCYCLES; i++)
 41e:	81 2c       	mov	r8, r1
 420:	91 2c       	mov	r9, r1
 422:	54 01       	movw	r10, r8
 424:	75 01       	movw	r14, r10
 426:	64 01       	movw	r12, r8
		{
			if (!getStatus(pin))
 428:	8c 2f       	mov	r24, r28
 42a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN8Integral6Device9getStatusENS_3PINE>
 42e:	81 11       	cpse	r24, r1
 430:	0a c0       	rjmp	.+20     	; 0x446 <_ZN8Integral6Keypad13switchPressedENS_3PINE+0x3c>
			high++;
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	40 e8       	ldi	r20, 0x80	; 128
 438:	5f e3       	ldi	r21, 0x3F	; 63
 43a:	c5 01       	movw	r24, r10
 43c:	b4 01       	movw	r22, r8
 43e:	0e 94 be 04 	call	0x97c	; 0x97c <__addsf3>
 442:	4b 01       	movw	r8, r22
 444:	5c 01       	movw	r10, r24
			// conditions to break the loop and accept result
			if (i > DEBOUNCE_MINCYCLES && high/i >= DEBOUNCE_CONFIDFRAC)
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	40 e4       	ldi	r20, 0x40	; 64
 44c:	50 e4       	ldi	r21, 0x40	; 64
 44e:	c7 01       	movw	r24, r14
 450:	b6 01       	movw	r22, r12
 452:	0e 94 16 06 	call	0xc2c	; 0xc2c <__gesf2>
 456:	18 16       	cp	r1, r24
 458:	7c f4       	brge	.+30     	; 0x478 <_ZN8Integral6Keypad13switchPressedENS_3PINE+0x6e>
 45a:	a7 01       	movw	r20, r14
 45c:	96 01       	movw	r18, r12
 45e:	c5 01       	movw	r24, r10
 460:	b4 01       	movw	r22, r8
 462:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__divsf3>
 466:	23 e3       	ldi	r18, 0x33	; 51
 468:	33 e3       	ldi	r19, 0x33	; 51
 46a:	43 e3       	ldi	r20, 0x33	; 51
 46c:	5f e3       	ldi	r21, 0x3F	; 63
 46e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__gesf2>
 472:	88 23       	and	r24, r24
 474:	5c f0       	brlt	.+22     	; 0x48c <_ZN8Integral6Keypad13switchPressedENS_3PINE+0x82>
 476:	52 c0       	rjmp	.+164    	; 0x51c <_ZN8Integral6Keypad13switchPressedENS_3PINE+0x112>
			{
				result = HIGH;
				break;
			}
			if (i > DEBOUNCE_MINCYCLES && (1 - high/i) >= DEBOUNCE_CONFIDFRAC)
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	40 e4       	ldi	r20, 0x40	; 64
 47e:	50 e4       	ldi	r21, 0x40	; 64
 480:	c7 01       	movw	r24, r14
 482:	b6 01       	movw	r22, r12
 484:	0e 94 16 06 	call	0xc2c	; 0xc2c <__gesf2>
 488:	18 16       	cp	r1, r24
 48a:	b4 f4       	brge	.+44     	; 0x4b8 <_ZN8Integral6Keypad13switchPressedENS_3PINE+0xae>
 48c:	a7 01       	movw	r20, r14
 48e:	96 01       	movw	r18, r12
 490:	c5 01       	movw	r24, r10
 492:	b4 01       	movw	r22, r8
 494:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__divsf3>
 498:	9b 01       	movw	r18, r22
 49a:	ac 01       	movw	r20, r24
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	80 e8       	ldi	r24, 0x80	; 128
 4a2:	9f e3       	ldi	r25, 0x3F	; 63
 4a4:	0e 94 bd 04 	call	0x97a	; 0x97a <__subsf3>
 4a8:	23 e3       	ldi	r18, 0x33	; 51
 4aa:	33 e3       	ldi	r19, 0x33	; 51
 4ac:	43 e3       	ldi	r20, 0x33	; 51
 4ae:	5f e3       	ldi	r21, 0x3F	; 63
 4b0:	0e 94 16 06 	call	0xc2c	; 0xc2c <__gesf2>
 4b4:	88 23       	and	r24, r24
 4b6:	a4 f5       	brge	.+104    	; 0x520 <_ZN8Integral6Keypad13switchPressedENS_3PINE+0x116>
			{
				result = LOW;
				break;
			}
			if (i == DEBOUNCE_MAXCYCLES - 1)
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	46 ec       	ldi	r20, 0xC6	; 198
 4be:	52 e4       	ldi	r21, 0x42	; 66
 4c0:	c7 01       	movw	r24, r14
 4c2:	b6 01       	movw	r22, r12
 4c4:	0e 94 2a 05 	call	0xa54	; 0xa54 <__cmpsf2>
 4c8:	81 11       	cpse	r24, r1
 4ca:	13 c0       	rjmp	.+38     	; 0x4f2 <_ZN8Integral6Keypad13switchPressedENS_3PINE+0xe8>
			{
				if (high/i > 0.5)
 4cc:	20 e0       	ldi	r18, 0x00	; 0
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	46 ec       	ldi	r20, 0xC6	; 198
 4d2:	52 e4       	ldi	r21, 0x42	; 66
 4d4:	c5 01       	movw	r24, r10
 4d6:	b4 01       	movw	r22, r8
 4d8:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__divsf3>
 4dc:	c1 e0       	ldi	r28, 0x01	; 1
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	40 e0       	ldi	r20, 0x00	; 0
 4e4:	5f e3       	ldi	r21, 0x3F	; 63
 4e6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__gesf2>
 4ea:	18 16       	cp	r1, r24
 4ec:	d4 f0       	brlt	.+52     	; 0x522 <_ZN8Integral6Keypad13switchPressedENS_3PINE+0x118>
 4ee:	c0 e0       	ldi	r28, 0x00	; 0
 4f0:	18 c0       	rjmp	.+48     	; 0x522 <_ZN8Integral6Keypad13switchPressedENS_3PINE+0x118>
	}

	bool Keypad::switchPressed(PIN pin)
	{
		bool result = LOW;
		for (double i = 0.0, high = 0.0; i < DEBOUNCE_MAXCYCLES; i++)
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	40 e8       	ldi	r20, 0x80	; 128
 4f8:	5f e3       	ldi	r21, 0x3F	; 63
 4fa:	c7 01       	movw	r24, r14
 4fc:	b6 01       	movw	r22, r12
 4fe:	0e 94 be 04 	call	0x97c	; 0x97c <__addsf3>
 502:	6b 01       	movw	r12, r22
 504:	7c 01       	movw	r14, r24
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	48 ec       	ldi	r20, 0xC8	; 200
 50c:	52 e4       	ldi	r21, 0x42	; 66
 50e:	0e 94 2a 05 	call	0xa54	; 0xa54 <__cmpsf2>
 512:	88 23       	and	r24, r24
 514:	0c f4       	brge	.+2      	; 0x518 <_ZN8Integral6Keypad13switchPressedENS_3PINE+0x10e>
 516:	88 cf       	rjmp	.-240    	; 0x428 <_ZN8Integral6Keypad13switchPressedENS_3PINE+0x1e>
		return result;
	}

	bool Keypad::switchPressed(PIN pin)
	{
		bool result = LOW;
 518:	c0 e0       	ldi	r28, 0x00	; 0
 51a:	03 c0       	rjmp	.+6      	; 0x522 <_ZN8Integral6Keypad13switchPressedENS_3PINE+0x118>
			if (!getStatus(pin))
			high++;
			// conditions to break the loop and accept result
			if (i > DEBOUNCE_MINCYCLES && high/i >= DEBOUNCE_CONFIDFRAC)
			{
				result = HIGH;
 51c:	c1 e0       	ldi	r28, 0x01	; 1
 51e:	01 c0       	rjmp	.+2      	; 0x522 <_ZN8Integral6Keypad13switchPressedENS_3PINE+0x118>
				break;
			}
			if (i > DEBOUNCE_MINCYCLES && (1 - high/i) >= DEBOUNCE_CONFIDFRAC)
			{
				result = LOW;
 520:	c0 e0       	ldi	r28, 0x00	; 0
				break;
			}
		}
		// Reporting the status and updating variables
		return result;
	}
 522:	8c 2f       	mov	r24, r28
 524:	cf 91       	pop	r28
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	df 90       	pop	r13
 52c:	cf 90       	pop	r12
 52e:	bf 90       	pop	r11
 530:	af 90       	pop	r10
 532:	9f 90       	pop	r9
 534:	8f 90       	pop	r8
 536:	08 95       	ret

00000538 <_ZN8Integral6Keypad9isPressedEv>:
		}
		return result;
	}

	KeypadMatrix Keypad::isPressed()
	{	
 538:	af 92       	push	r10
 53a:	bf 92       	push	r11
 53c:	cf 92       	push	r12
 53e:	df 92       	push	r13
 540:	ef 92       	push	r14
 542:	ff 92       	push	r15
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	a8 2e       	mov	r10, r24
 54e:	b9 2e       	mov	r11, r25
 550:	7b 01       	movw	r14, r22
 552:	c8 2e       	mov	r12, r24
 554:	d9 2e       	mov	r13, r25
 556:	d0 e0       	ldi	r29, 0x00	; 0
		KeypadMatrix result;
		for (int i = 0; i < 4; i++)
		{
			setStatus((PIN)(port + i), LOW);
 558:	f7 01       	movw	r30, r14
 55a:	82 81       	ldd	r24, Z+2	; 0x02
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	8d 0f       	add	r24, r29
 560:	0e 94 41 00 	call	0x82	; 0x82 <_ZN8Integral6Device9setStatusENS_3PINEb>
 564:	86 01       	movw	r16, r12
 566:	c0 e0       	ldi	r28, 0x00	; 0
 568:	f7 01       	movw	r30, r14
 56a:	82 81       	ldd	r24, Z+2	; 0x02
 56c:	8c 5f       	subi	r24, 0xFC	; 252
			for (int j = 0; j < 4; j++)
			result.set(i, j, switchPressed((PIN)(port + 4 + j)));
 56e:	8c 0f       	add	r24, r28
 570:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN8Integral6Keypad13switchPressedENS_3PINE>
		{
			return data[x][y];
		}
		void set(int x, int y, bool val)
		{
			data[x][y] = val;
 574:	f8 01       	movw	r30, r16
 576:	81 93       	st	Z+, r24
 578:	8f 01       	movw	r16, r30
 57a:	cf 5f       	subi	r28, 0xFF	; 255
	{	
		KeypadMatrix result;
		for (int i = 0; i < 4; i++)
		{
			setStatus((PIN)(port + i), LOW);
			for (int j = 0; j < 4; j++)
 57c:	c4 30       	cpi	r28, 0x04	; 4
 57e:	a1 f7       	brne	.-24     	; 0x568 <_ZN8Integral6Keypad9isPressedEv+0x30>
			result.set(i, j, switchPressed((PIN)(port + 4 + j)));
			setStatus((PIN)(port + i), HIGH);
 580:	f7 01       	movw	r30, r14
 582:	82 81       	ldd	r24, Z+2	; 0x02
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	8d 0f       	add	r24, r29
 588:	0e 94 41 00 	call	0x82	; 0x82 <_ZN8Integral6Device9setStatusENS_3PINEb>
 58c:	df 5f       	subi	r29, 0xFF	; 255
 58e:	f4 e0       	ldi	r31, 0x04	; 4
 590:	cf 0e       	add	r12, r31
 592:	d1 1c       	adc	r13, r1
	}

	KeypadMatrix Keypad::isPressed()
	{	
		KeypadMatrix result;
		for (int i = 0; i < 4; i++)
 594:	d4 30       	cpi	r29, 0x04	; 4
 596:	01 f7       	brne	.-64     	; 0x558 <_ZN8Integral6Keypad9isPressedEv+0x20>
			for (int j = 0; j < 4; j++)
			result.set(i, j, switchPressed((PIN)(port + 4 + j)));
			setStatus((PIN)(port + i), HIGH);
		}
		return result;
	}
 598:	8a 2d       	mov	r24, r10
 59a:	9b 2d       	mov	r25, r11
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	df 90       	pop	r13
 5aa:	cf 90       	pop	r12
 5ac:	bf 90       	pop	r11
 5ae:	af 90       	pop	r10
 5b0:	08 95       	ret

000005b2 <_ZN8Integral15ParallelTextLCD13action_enableEv>:
			action_enable();
		setDirection(dataPort, 0xFF);
	}

	void ParallelTextLCD::action_enable(void)
	{
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	ec 01       	movw	r28, r24
		setStatus(pinEN, HIGH);
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	0e 94 41 00 	call	0x82	; 0x82 <_ZN8Integral6Device9setStatusENS_3PINEb>
		asm volatile ("nop");
 5c0:	00 00       	nop
		asm volatile ("nop");
 5c2:	00 00       	nop
		setStatus(pinEN, LOW);
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	8b 81       	ldd	r24, Y+3	; 0x03
 5c8:	0e 94 41 00 	call	0x82	; 0x82 <_ZN8Integral6Device9setStatusENS_3PINEb>
	}
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <_ZN8Integral15ParallelTextLCD9wait_busyEv>:
		action_enable();
		setStatus(dataPort, 0x00);
	}

	void ParallelTextLCD::wait_busy(void)
	{
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	ec 01       	movw	r28, r24
		setDirection(dataPort, 0x00);
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	0e 94 a8 01 	call	0x350	; 0x350 <_ZN8Integral6Device12setDirectionENS_4PORTEi>
		setStatus(pinRW, HIGH);
 5e2:	61 e0       	ldi	r22, 0x01	; 1
 5e4:	8c 81       	ldd	r24, Y+4	; 0x04
 5e6:	0e 94 41 00 	call	0x82	; 0x82 <_ZN8Integral6Device9setStatusENS_3PINEb>
		setStatus(pinRS, LOW);
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	8d 81       	ldd	r24, Y+5	; 0x05
 5ee:	0e 94 41 00 	call	0x82	; 0x82 <_ZN8Integral6Device9setStatusENS_3PINEb>
		while (getStatus(dataPort, IOPIN7) != HIGH)
 5f2:	03 c0       	rjmp	.+6      	; 0x5fa <_ZN8Integral15ParallelTextLCD9wait_busyEv+0x28>
			action_enable();
 5f4:	ce 01       	movw	r24, r28
 5f6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN8Integral15ParallelTextLCD13action_enableEv>
	void ParallelTextLCD::wait_busy(void)
	{
		setDirection(dataPort, 0x00);
		setStatus(pinRW, HIGH);
		setStatus(pinRS, LOW);
		while (getStatus(dataPort, IOPIN7) != HIGH)
 5fa:	67 e0       	ldi	r22, 0x07	; 7
 5fc:	8a 81       	ldd	r24, Y+2	; 0x02
 5fe:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN8Integral6Device9getStatusENS_4PORTENS_8POSITIONE>
 602:	88 23       	and	r24, r24
 604:	b9 f3       	breq	.-18     	; 0x5f4 <_ZN8Integral15ParallelTextLCD9wait_busyEv+0x22>
			action_enable();
		setDirection(dataPort, 0xFF);
 606:	6f ef       	ldi	r22, 0xFF	; 255
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	8a 81       	ldd	r24, Y+2	; 0x02
 60c:	0e 94 a8 01 	call	0x350	; 0x350 <_ZN8Integral6Device12setDirectionENS_4PORTEi>
	}
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <_ZN8Integral15ParallelTextLCD7commandEh>:
		command(0b00001111);
		_delay_us(50);
	}

	void ParallelTextLCD::command(unsigned char cmd)
	{
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	ec 01       	movw	r28, r24
 61e:	16 2f       	mov	r17, r22
		wait_busy();
 620:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN8Integral15ParallelTextLCD9wait_busyEv>
		setStatus(dataPort, cmd);
 624:	61 2f       	mov	r22, r17
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	8a 81       	ldd	r24, Y+2	; 0x02
 62a:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN8Integral6Device9setStatusENS_4PORTEi>
		setStatus(pinRW, LOW);
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	8c 81       	ldd	r24, Y+4	; 0x04
 632:	0e 94 41 00 	call	0x82	; 0x82 <_ZN8Integral6Device9setStatusENS_3PINEb>
		setStatus(pinRS, LOW);
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	8d 81       	ldd	r24, Y+5	; 0x05
 63a:	0e 94 41 00 	call	0x82	; 0x82 <_ZN8Integral6Device9setStatusENS_3PINEb>
		action_enable();
 63e:	ce 01       	movw	r24, r28
 640:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN8Integral15ParallelTextLCD13action_enableEv>
		setStatus(dataPort, 0x00);
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	8a 81       	ldd	r24, Y+2	; 0x02
 64a:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN8Integral6Device9setStatusENS_4PORTEi>
	}
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	08 95       	ret

00000656 <_ZN8Integral15ParallelTextLCD10initializeEv>:
		setStatus(pinRW, LOW);
		setStatus(pinEN, LOW);
	}

	void ParallelTextLCD::initialize()
	{
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	ec 01       	movw	r28, r24
		setDirection(pinRS, DDR_OUTPUT);
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	8d 81       	ldd	r24, Y+5	; 0x05
 660:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZN8Integral6Device12setDirectionENS_3PINEb>
		setDirection(pinRW, DDR_OUTPUT);
 664:	61 e0       	ldi	r22, 0x01	; 1
 666:	8c 81       	ldd	r24, Y+4	; 0x04
 668:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZN8Integral6Device12setDirectionENS_3PINEb>
		setDirection(pinEN, DDR_OUTPUT);
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	8b 81       	ldd	r24, Y+3	; 0x03
 670:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZN8Integral6Device12setDirectionENS_3PINEb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 674:	85 ea       	ldi	r24, 0xA5	; 165
 676:	9e e0       	ldi	r25, 0x0E	; 14
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	f1 f7       	brne	.-4      	; 0x678 <_ZN8Integral15ParallelTextLCD10initializeEv+0x22>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <_ZN8Integral15ParallelTextLCD10initializeEv+0x28>
 67e:	00 00       	nop
		_delay_ms(15);
		command(0x01); // Clear Screen
 680:	61 e0       	ldi	r22, 0x01	; 1
 682:	ce 01       	movw	r24, r28
 684:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN8Integral15ParallelTextLCD7commandEh>
 688:	83 ef       	ldi	r24, 0xF3	; 243
 68a:	91 e0       	ldi	r25, 0x01	; 1
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	f1 f7       	brne	.-4      	; 0x68c <_ZN8Integral15ParallelTextLCD10initializeEv+0x36>
 690:	00 c0       	rjmp	.+0      	; 0x692 <_ZN8Integral15ParallelTextLCD10initializeEv+0x3c>
 692:	00 00       	nop
		_delay_ms(2);
		command(0x38); // Set up LCD 8-bit mode
 694:	68 e3       	ldi	r22, 0x38	; 56
 696:	ce 01       	movw	r24, r28
 698:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN8Integral15ParallelTextLCD7commandEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 69c:	90 e1       	ldi	r25, 0x10	; 16
 69e:	9a 95       	dec	r25
 6a0:	f1 f7       	brne	.-4      	; 0x69e <_ZN8Integral15ParallelTextLCD10initializeEv+0x48>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <_ZN8Integral15ParallelTextLCD10initializeEv+0x4e>
		_delay_us(50);
		command(0b00001100); // Bit 3: Use function |2: Show Display |1: Show Cursor |0: Blinking Cursor
 6a4:	6c e0       	ldi	r22, 0x0C	; 12
 6a6:	ce 01       	movw	r24, r28
 6a8:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN8Integral15ParallelTextLCD7commandEh>
 6ac:	80 e1       	ldi	r24, 0x10	; 16
 6ae:	8a 95       	dec	r24
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <_ZN8Integral15ParallelTextLCD10initializeEv+0x58>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <_ZN8Integral15ParallelTextLCD10initializeEv+0x5e>
		_delay_us(50);
	}
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	08 95       	ret

000006ba <_ZN8Integral15ParallelTextLCDC1ENS_4PORTENS_3PINES2_S2_>:


namespace Integral
{
	// default constructor
	ParallelTextLCD::ParallelTextLCD(PORT portData, PIN pinRS, PIN pinRW, PIN pinEN)
 6ba:	0f 93       	push	r16
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	ec 01       	movw	r28, r24
 6c2:	82 e8       	ldi	r24, 0x82	; 130
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	99 83       	std	Y+1, r25	; 0x01
 6c8:	88 83       	st	Y, r24
 6ca:	88 e0       	ldi	r24, 0x08	; 8
 6cc:	e0 e6       	ldi	r30, 0x60	; 96
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	de 01       	movw	r26, r28
 6d2:	16 96       	adiw	r26, 0x06	; 6
 6d4:	01 90       	ld	r0, Z+
 6d6:	0d 92       	st	X+, r0
 6d8:	8a 95       	dec	r24
 6da:	e1 f7       	brne	.-8      	; 0x6d4 <_ZN8Integral15ParallelTextLCDC1ENS_4PORTENS_3PINES2_S2_+0x1a>
	{
		this->dataPort = portData;
 6dc:	6a 83       	std	Y+2, r22	; 0x02
		this->pinRS = pinRS;
 6de:	4d 83       	std	Y+5, r20	; 0x05
		this->pinRW = pinRW;
 6e0:	2c 83       	std	Y+4, r18	; 0x04
		this->pinEN = pinEN;
 6e2:	0b 83       	std	Y+3, r16	; 0x03
		initialize();
 6e4:	ce 01       	movw	r24, r28
 6e6:	0e 94 2b 03 	call	0x656	; 0x656 <_ZN8Integral15ParallelTextLCD10initializeEv>
	}
 6ea:	df 91       	pop	r29
 6ec:	cf 91       	pop	r28
 6ee:	0f 91       	pop	r16
 6f0:	08 95       	ret

000006f2 <_ZN8Integral15ParallelTextLCD8positionEii>:
		while(*str > 0)
		character(*str++);
	}

	void ParallelTextLCD::position(int x, int y)
	{
 6f2:	60 58       	subi	r22, 0x80	; 128
		command(0x80 + this->rowPositions[y] + x);
 6f4:	fa 01       	movw	r30, r20
 6f6:	33 96       	adiw	r30, 0x03	; 3
 6f8:	ee 0f       	add	r30, r30
 6fa:	ff 1f       	adc	r31, r31
 6fc:	e8 0f       	add	r30, r24
 6fe:	f9 1f       	adc	r31, r25
 700:	20 81       	ld	r18, Z
 702:	62 0f       	add	r22, r18
 704:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN8Integral15ParallelTextLCD7commandEh>
 708:	08 95       	ret

0000070a <_ZN8Integral15ParallelTextLCD9characterEh>:
		action_enable();
		setStatus(dataPort, 0x00);
	}

	void ParallelTextLCD::character(unsigned char chr)
	{
 70a:	1f 93       	push	r17
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	ec 01       	movw	r28, r24
 712:	16 2f       	mov	r17, r22
		wait_busy();
 714:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN8Integral15ParallelTextLCD9wait_busyEv>
		setStatus(dataPort, chr);
 718:	61 2f       	mov	r22, r17
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	8a 81       	ldd	r24, Y+2	; 0x02
 71e:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN8Integral6Device9setStatusENS_4PORTEi>
		setStatus(pinRW, LOW);
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	8c 81       	ldd	r24, Y+4	; 0x04
 726:	0e 94 41 00 	call	0x82	; 0x82 <_ZN8Integral6Device9setStatusENS_3PINEb>
		setStatus(pinRS, HIGH);
 72a:	61 e0       	ldi	r22, 0x01	; 1
 72c:	8d 81       	ldd	r24, Y+5	; 0x05
 72e:	0e 94 41 00 	call	0x82	; 0x82 <_ZN8Integral6Device9setStatusENS_3PINEb>
		action_enable();
 732:	ce 01       	movw	r24, r28
 734:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN8Integral15ParallelTextLCD13action_enableEv>
		setStatus(dataPort, 0x00);
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN8Integral6Device9setStatusENS_4PORTEi>
	}
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	08 95       	ret

0000074a <_ZN8Integral15ParallelTextLCD6stringEPKc>:
		position(x, y);
		string(str);
	}

	void ParallelTextLCD::string(const char* str)
	{
 74a:	0f 93       	push	r16
 74c:	1f 93       	push	r17
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	eb 01       	movw	r28, r22
		while(*str > 0)
 754:	68 81       	ld	r22, Y
 756:	66 23       	and	r22, r22
 758:	41 f0       	breq	.+16     	; 0x76a <_ZN8Integral15ParallelTextLCD6stringEPKc+0x20>
 75a:	8c 01       	movw	r16, r24
 75c:	21 96       	adiw	r28, 0x01	; 1
		character(*str++);
 75e:	c8 01       	movw	r24, r16
 760:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN8Integral15ParallelTextLCD9characterEh>
		string(str);
	}

	void ParallelTextLCD::string(const char* str)
	{
		while(*str > 0)
 764:	69 91       	ld	r22, Y+
 766:	61 11       	cpse	r22, r1
 768:	fa cf       	rjmp	.-12     	; 0x75e <_ZN8Integral15ParallelTextLCD6stringEPKc+0x14>
		character(*str++);
	}
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	1f 91       	pop	r17
 770:	0f 91       	pop	r16
 772:	08 95       	ret

00000774 <_ZN8Integral15ParallelTextLCD6stringEiiPKc>:
		for (int i = 0; i < digits; i++) string(" ");
		string(str);
	}

	void ParallelTextLCD::string(int x, int y, const char* str)
	{
 774:	0f 93       	push	r16
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	ec 01       	movw	r28, r24
 77e:	89 01       	movw	r16, r18
		position(x, y);
 780:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_ZN8Integral15ParallelTextLCD8positionEii>
		string(str);
 784:	b8 01       	movw	r22, r16
 786:	ce 01       	movw	r24, r28
 788:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN8Integral15ParallelTextLCD6stringEPKc>
	}
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	08 95       	ret

00000796 <_ZN8Integral7IstreamC1Ev>:
#include "Istream.h"

namespace Integral
{
	// default constructor
	Istream::Istream()
 796:	20 e1       	ldi	r18, 0x10	; 16
 798:	e8 e6       	ldi	r30, 0x68	; 104
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	dc 01       	movw	r26, r24
 79e:	12 96       	adiw	r26, 0x02	; 2
 7a0:	01 90       	ld	r0, Z+
 7a2:	0d 92       	st	X+, r0
 7a4:	2a 95       	dec	r18
 7a6:	e1 f7       	brne	.-8      	; 0x7a0 <_ZN8Integral7IstreamC1Ev+0xa>
	{
		disabledKey = 100;
 7a8:	24 e6       	ldi	r18, 0x64	; 100
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	fc 01       	movw	r30, r24
 7ae:	33 8b       	std	Z+19, r19	; 0x13
 7b0:	22 8b       	std	Z+18, r18	; 0x12
		stream = "";
 7b2:	24 e8       	ldi	r18, 0x84	; 132
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	31 83       	std	Z+1, r19	; 0x01
 7b8:	20 83       	st	Z, r18
 7ba:	08 95       	ret

000007bc <_ZN8Integral7Istream6updateENS_12KeypadMatrixE>:
	Istream::~Istream()
	{
	} //~Istream
	
	void Istream::update(KeypadMatrix data)
	{
 7bc:	8f 92       	push	r8
 7be:	9f 92       	push	r9
 7c0:	af 92       	push	r10
 7c2:	bf 92       	push	r11
 7c4:	cf 92       	push	r12
 7c6:	df 92       	push	r13
 7c8:	ef 92       	push	r14
 7ca:	ff 92       	push	r15
 7cc:	0f 93       	push	r16
 7ce:	1f 93       	push	r17
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	60 97       	sbiw	r28, 0x10	; 16
 7da:	0f b6       	in	r0, 0x3f	; 63
 7dc:	f8 94       	cli
 7de:	de bf       	out	0x3e, r29	; 62
 7e0:	0f be       	out	0x3f, r0	; 63
 7e2:	cd bf       	out	0x3d, r28	; 61
 7e4:	89 82       	std	Y+1, r8	; 0x01
 7e6:	9a 82       	std	Y+2, r9	; 0x02
 7e8:	ab 82       	std	Y+3, r10	; 0x03
 7ea:	bc 82       	std	Y+4, r11	; 0x04
 7ec:	cd 82       	std	Y+5, r12	; 0x05
 7ee:	de 82       	std	Y+6, r13	; 0x06
 7f0:	ef 82       	std	Y+7, r14	; 0x07
 7f2:	f8 86       	std	Y+8, r15	; 0x08
 7f4:	09 87       	std	Y+9, r16	; 0x09
 7f6:	1a 87       	std	Y+10, r17	; 0x0a
 7f8:	2b 87       	std	Y+11, r18	; 0x0b
 7fa:	3c 87       	std	Y+12, r19	; 0x0c
 7fc:	4d 87       	std	Y+13, r20	; 0x0d
 7fe:	5e 87       	std	Y+14, r21	; 0x0e
 800:	6f 87       	std	Y+15, r22	; 0x0f
 802:	78 8b       	std	Y+16, r23	; 0x10
		if(data.get(disabledKey/4, disabledKey%4) == false)
 804:	dc 01       	movw	r26, r24
 806:	52 96       	adiw	r26, 0x12	; 18
 808:	2d 91       	ld	r18, X+
 80a:	3c 91       	ld	r19, X
 80c:	53 97       	sbiw	r26, 0x13	; 19
 80e:	f9 01       	movw	r30, r18
 810:	33 23       	and	r19, r19
 812:	0c f4       	brge	.+2      	; 0x816 <_ZN8Integral7Istream6updateENS_12KeypadMatrixE+0x5a>
 814:	33 96       	adiw	r30, 0x03	; 3
 816:	f5 95       	asr	r31
 818:	e7 95       	ror	r30
 81a:	f5 95       	asr	r31
 81c:	e7 95       	ror	r30
 81e:	23 70       	andi	r18, 0x03	; 3
 820:	30 78       	andi	r19, 0x80	; 128
 822:	33 23       	and	r19, r19
 824:	34 f4       	brge	.+12     	; 0x832 <_ZN8Integral7Istream6updateENS_12KeypadMatrixE+0x76>
 826:	21 50       	subi	r18, 0x01	; 1
 828:	31 09       	sbc	r19, r1
 82a:	2c 6f       	ori	r18, 0xFC	; 252
 82c:	3f 6f       	ori	r19, 0xFF	; 255
 82e:	2f 5f       	subi	r18, 0xFF	; 255
 830:	3f 4f       	sbci	r19, 0xFF	; 255
	{
	public:
		bool data[4][4];
		bool get(int x, int y)
		{
			return data[x][y];
 832:	ee 0f       	add	r30, r30
 834:	ff 1f       	adc	r31, r31
 836:	ee 0f       	add	r30, r30
 838:	ff 1f       	adc	r31, r31
 83a:	2e 0f       	add	r18, r30
 83c:	3f 1f       	adc	r19, r31
 83e:	fe 01       	movw	r30, r28
 840:	e2 0f       	add	r30, r18
 842:	f3 1f       	adc	r31, r19
 844:	21 81       	ldd	r18, Z+1	; 0x01
 846:	21 11       	cpse	r18, r1
 848:	28 c0       	rjmp	.+80     	; 0x89a <__stack+0x3b>
			disabledKey = 100;
 84a:	24 e6       	ldi	r18, 0x64	; 100
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	fc 01       	movw	r30, r24
 850:	33 8b       	std	Z+19, r19	; 0x13
 852:	22 8b       	std	Z+18, r18	; 0x12
 854:	22 c0       	rjmp	.+68     	; 0x89a <__stack+0x3b>
 856:	d6 01       	movw	r26, r12
 858:	4d 91       	ld	r20, X+
 85a:	6d 01       	movw	r12, r26
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
			{
				if (data.get(i, j) && (i*4 + j != disabledKey))
 85c:	44 23       	and	r20, r20
 85e:	41 f0       	breq	.+16     	; 0x870 <__stack+0x11>
 860:	dc 01       	movw	r26, r24
 862:	52 96       	adiw	r26, 0x12	; 18
 864:	4d 91       	ld	r20, X+
 866:	5c 91       	ld	r21, X
 868:	53 97       	sbiw	r26, 0x13	; 19
 86a:	42 17       	cp	r20, r18
 86c:	53 07       	cpc	r21, r19
 86e:	d9 f4       	brne	.+54     	; 0x8a6 <__stack+0x47>
 870:	31 96       	adiw	r30, 0x01	; 1
 872:	2f 5f       	subi	r18, 0xFF	; 255
 874:	3f 4f       	sbci	r19, 0xFF	; 255
	void Istream::update(KeypadMatrix data)
	{
		if(data.get(disabledKey/4, disabledKey%4) == false)
			disabledKey = 100;
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
 876:	26 17       	cp	r18, r22
 878:	37 07       	cpc	r19, r23
 87a:	69 f7       	brne	.-38     	; 0x856 <_ZN8Integral7Istream6updateENS_12KeypadMatrixE+0x9a>
 87c:	0c 5f       	subi	r16, 0xFC	; 252
 87e:	1f 4f       	sbci	r17, 0xFF	; 255
 880:	9b 01       	movw	r18, r22
	
	void Istream::update(KeypadMatrix data)
	{
		if(data.get(disabledKey/4, disabledKey%4) == false)
			disabledKey = 100;
		for (int i = 0; i < 4; i++)
 882:	60 31       	cpi	r22, 0x10	; 16
 884:	71 05       	cpc	r23, r1
 886:	f1 f0       	breq	.+60     	; 0x8c4 <__stack+0x65>
 888:	f9 01       	movw	r30, r18
 88a:	32 96       	adiw	r30, 0x02	; 2
 88c:	e8 0f       	add	r30, r24
 88e:	f9 1f       	adc	r31, r25
 890:	b9 01       	movw	r22, r18
 892:	6c 5f       	subi	r22, 0xFC	; 252
 894:	7f 4f       	sbci	r23, 0xFF	; 255
	Istream::~Istream()
	{
	} //~Istream
	
	void Istream::update(KeypadMatrix data)
	{
 896:	68 01       	movw	r12, r16
 898:	de cf       	rjmp	.-68     	; 0x856 <_ZN8Integral7Istream6updateENS_12KeypadMatrixE+0x9a>
 89a:	8e 01       	movw	r16, r28
 89c:	0f 5f       	subi	r16, 0xFF	; 255
 89e:	1f 4f       	sbci	r17, 0xFF	; 255
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	f1 cf       	rjmp	.-30     	; 0x888 <__stack+0x29>
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
			{
				if (data.get(i, j) && (i*4 + j != disabledKey))
				{
					stream += keymap[i][j];
 8a6:	f0 80       	ld	r15, Z
 8a8:	dc 01       	movw	r26, r24
 8aa:	4d 91       	ld	r20, X+
 8ac:	5c 91       	ld	r21, X
 8ae:	11 97       	sbiw	r26, 0x01	; 1
 8b0:	4f 0d       	add	r20, r15
 8b2:	51 1d       	adc	r21, r1
 8b4:	11 96       	adiw	r26, 0x01	; 1
 8b6:	5c 93       	st	X, r21
 8b8:	4e 93       	st	-X, r20
					disabledKey = i*4 + j;
 8ba:	53 96       	adiw	r26, 0x13	; 19
 8bc:	3c 93       	st	X, r19
 8be:	2e 93       	st	-X, r18
 8c0:	52 97       	sbiw	r26, 0x12	; 18
 8c2:	d6 cf       	rjmp	.-84     	; 0x870 <__stack+0x11>
				}
			}
	}
 8c4:	60 96       	adiw	r28, 0x10	; 16
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	f8 94       	cli
 8ca:	de bf       	out	0x3e, r29	; 62
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	cd bf       	out	0x3d, r28	; 61
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	1f 91       	pop	r17
 8d6:	0f 91       	pop	r16
 8d8:	ff 90       	pop	r15
 8da:	ef 90       	pop	r14
 8dc:	df 90       	pop	r13
 8de:	cf 90       	pop	r12
 8e0:	bf 90       	pop	r11
 8e2:	af 90       	pop	r10
 8e4:	9f 90       	pop	r9
 8e6:	8f 90       	pop	r8
 8e8:	08 95       	ret

000008ea <main>:
#include "drivers/ParallelTextLCD.h"
#include "drivers/Keypad.h"
#include "interface/Istream.h"
using namespace Integral;
int main(void)
{
 8ea:	cf 93       	push	r28
 8ec:	df 93       	push	r29
 8ee:	cd b7       	in	r28, 0x3d	; 61
 8f0:	de b7       	in	r29, 0x3e	; 62
 8f2:	c5 54       	subi	r28, 0x45	; 69
 8f4:	d1 09       	sbc	r29, r1
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	f8 94       	cli
 8fa:	de bf       	out	0x3e, r29	; 62
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	cd bf       	out	0x3d, r28	; 61
	ParallelTextLCD lcd(IOPORTB, IOPIND2, IOPIND7, IOPIND5);
 900:	0d e1       	ldi	r16, 0x1D	; 29
 902:	2f e1       	ldi	r18, 0x1F	; 31
 904:	4a e1       	ldi	r20, 0x1A	; 26
 906:	68 e0       	ldi	r22, 0x08	; 8
 908:	ce 01       	movw	r24, r28
 90a:	c8 96       	adiw	r24, 0x38	; 56
 90c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN8Integral15ParallelTextLCDC1ENS_4PORTENS_3PINES2_S2_>
	Keypad pad(IOPORTA);
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	ce 01       	movw	r24, r28
 914:	85 96       	adiw	r24, 0x25	; 37
 916:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_ZN8Integral6KeypadC1ENS_4PORTE>
	Istream stream;
 91a:	ce 01       	movw	r24, r28
 91c:	41 96       	adiw	r24, 0x11	; 17
 91e:	0e 94 cb 03 	call	0x796	; 0x796 <_ZN8Integral7IstreamC1Ev>
	while(1)
	{
		stream.update(pad.isPressed());
 922:	be 01       	movw	r22, r28
 924:	6b 5d       	subi	r22, 0xDB	; 219
 926:	7f 4f       	sbci	r23, 0xFF	; 255
 928:	ce 01       	movw	r24, r28
 92a:	01 96       	adiw	r24, 0x01	; 1
 92c:	0e 94 9c 02 	call	0x538	; 0x538 <_ZN8Integral6Keypad9isPressedEv>
 930:	89 80       	ldd	r8, Y+1	; 0x01
 932:	9a 80       	ldd	r9, Y+2	; 0x02
 934:	ab 80       	ldd	r10, Y+3	; 0x03
 936:	bc 80       	ldd	r11, Y+4	; 0x04
 938:	cd 80       	ldd	r12, Y+5	; 0x05
 93a:	de 80       	ldd	r13, Y+6	; 0x06
 93c:	ef 80       	ldd	r14, Y+7	; 0x07
 93e:	f8 84       	ldd	r15, Y+8	; 0x08
 940:	09 85       	ldd	r16, Y+9	; 0x09
 942:	1a 85       	ldd	r17, Y+10	; 0x0a
 944:	2b 85       	ldd	r18, Y+11	; 0x0b
 946:	3c 85       	ldd	r19, Y+12	; 0x0c
 948:	4d 85       	ldd	r20, Y+13	; 0x0d
 94a:	5e 85       	ldd	r21, Y+14	; 0x0e
 94c:	6f 85       	ldd	r22, Y+15	; 0x0f
 94e:	78 89       	ldd	r23, Y+16	; 0x10
 950:	ce 01       	movw	r24, r28
 952:	41 96       	adiw	r24, 0x11	; 17
 954:	0e 94 de 03 	call	0x7bc	; 0x7bc <_ZN8Integral7Istream6updateENS_12KeypadMatrixE>
		lcd.string(0, 0, stream.stream);
 958:	29 89       	ldd	r18, Y+17	; 0x11
 95a:	3a 89       	ldd	r19, Y+18	; 0x12
 95c:	40 e0       	ldi	r20, 0x00	; 0
 95e:	50 e0       	ldi	r21, 0x00	; 0
 960:	60 e0       	ldi	r22, 0x00	; 0
 962:	70 e0       	ldi	r23, 0x00	; 0
 964:	ce 01       	movw	r24, r28
 966:	c8 96       	adiw	r24, 0x38	; 56
 968:	0e 94 ba 03 	call	0x774	; 0x774 <_ZN8Integral15ParallelTextLCD6stringEiiPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 96c:	87 ea       	ldi	r24, 0xA7	; 167
 96e:	91 e6       	ldi	r25, 0x61	; 97
 970:	01 97       	sbiw	r24, 0x01	; 1
 972:	f1 f7       	brne	.-4      	; 0x970 <main+0x86>
 974:	00 c0       	rjmp	.+0      	; 0x976 <main+0x8c>
 976:	00 00       	nop
 978:	d4 cf       	rjmp	.-88     	; 0x922 <main+0x38>

0000097a <__subsf3>:
 97a:	50 58       	subi	r21, 0x80	; 128

0000097c <__addsf3>:
 97c:	bb 27       	eor	r27, r27
 97e:	aa 27       	eor	r26, r26
 980:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__addsf3x>
 984:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_round>
 988:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fp_pscA>
 98c:	38 f0       	brcs	.+14     	; 0x99c <__addsf3+0x20>
 98e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__fp_pscB>
 992:	20 f0       	brcs	.+8      	; 0x99c <__addsf3+0x20>
 994:	39 f4       	brne	.+14     	; 0x9a4 <__addsf3+0x28>
 996:	9f 3f       	cpi	r25, 0xFF	; 255
 998:	19 f4       	brne	.+6      	; 0x9a0 <__addsf3+0x24>
 99a:	26 f4       	brtc	.+8      	; 0x9a4 <__addsf3+0x28>
 99c:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_nan>
 9a0:	0e f4       	brtc	.+2      	; 0x9a4 <__addsf3+0x28>
 9a2:	e0 95       	com	r30
 9a4:	e7 fb       	bst	r30, 7
 9a6:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_inf>

000009aa <__addsf3x>:
 9aa:	e9 2f       	mov	r30, r25
 9ac:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_split3>
 9b0:	58 f3       	brcs	.-42     	; 0x988 <__addsf3+0xc>
 9b2:	ba 17       	cp	r27, r26
 9b4:	62 07       	cpc	r22, r18
 9b6:	73 07       	cpc	r23, r19
 9b8:	84 07       	cpc	r24, r20
 9ba:	95 07       	cpc	r25, r21
 9bc:	20 f0       	brcs	.+8      	; 0x9c6 <__addsf3x+0x1c>
 9be:	79 f4       	brne	.+30     	; 0x9de <__addsf3x+0x34>
 9c0:	a6 f5       	brtc	.+104    	; 0xa2a <__addsf3x+0x80>
 9c2:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_zero>
 9c6:	0e f4       	brtc	.+2      	; 0x9ca <__addsf3x+0x20>
 9c8:	e0 95       	com	r30
 9ca:	0b 2e       	mov	r0, r27
 9cc:	ba 2f       	mov	r27, r26
 9ce:	a0 2d       	mov	r26, r0
 9d0:	0b 01       	movw	r0, r22
 9d2:	b9 01       	movw	r22, r18
 9d4:	90 01       	movw	r18, r0
 9d6:	0c 01       	movw	r0, r24
 9d8:	ca 01       	movw	r24, r20
 9da:	a0 01       	movw	r20, r0
 9dc:	11 24       	eor	r1, r1
 9de:	ff 27       	eor	r31, r31
 9e0:	59 1b       	sub	r21, r25
 9e2:	99 f0       	breq	.+38     	; 0xa0a <__addsf3x+0x60>
 9e4:	59 3f       	cpi	r21, 0xF9	; 249
 9e6:	50 f4       	brcc	.+20     	; 0x9fc <__addsf3x+0x52>
 9e8:	50 3e       	cpi	r21, 0xE0	; 224
 9ea:	68 f1       	brcs	.+90     	; 0xa46 <__addsf3x+0x9c>
 9ec:	1a 16       	cp	r1, r26
 9ee:	f0 40       	sbci	r31, 0x00	; 0
 9f0:	a2 2f       	mov	r26, r18
 9f2:	23 2f       	mov	r18, r19
 9f4:	34 2f       	mov	r19, r20
 9f6:	44 27       	eor	r20, r20
 9f8:	58 5f       	subi	r21, 0xF8	; 248
 9fa:	f3 cf       	rjmp	.-26     	; 0x9e2 <__addsf3x+0x38>
 9fc:	46 95       	lsr	r20
 9fe:	37 95       	ror	r19
 a00:	27 95       	ror	r18
 a02:	a7 95       	ror	r26
 a04:	f0 40       	sbci	r31, 0x00	; 0
 a06:	53 95       	inc	r21
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__addsf3x+0x52>
 a0a:	7e f4       	brtc	.+30     	; 0xa2a <__addsf3x+0x80>
 a0c:	1f 16       	cp	r1, r31
 a0e:	ba 0b       	sbc	r27, r26
 a10:	62 0b       	sbc	r22, r18
 a12:	73 0b       	sbc	r23, r19
 a14:	84 0b       	sbc	r24, r20
 a16:	ba f0       	brmi	.+46     	; 0xa46 <__addsf3x+0x9c>
 a18:	91 50       	subi	r25, 0x01	; 1
 a1a:	a1 f0       	breq	.+40     	; 0xa44 <__addsf3x+0x9a>
 a1c:	ff 0f       	add	r31, r31
 a1e:	bb 1f       	adc	r27, r27
 a20:	66 1f       	adc	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	c2 f7       	brpl	.-16     	; 0xa18 <__addsf3x+0x6e>
 a28:	0e c0       	rjmp	.+28     	; 0xa46 <__addsf3x+0x9c>
 a2a:	ba 0f       	add	r27, r26
 a2c:	62 1f       	adc	r22, r18
 a2e:	73 1f       	adc	r23, r19
 a30:	84 1f       	adc	r24, r20
 a32:	48 f4       	brcc	.+18     	; 0xa46 <__addsf3x+0x9c>
 a34:	87 95       	ror	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	b7 95       	ror	r27
 a3c:	f7 95       	ror	r31
 a3e:	9e 3f       	cpi	r25, 0xFE	; 254
 a40:	08 f0       	brcs	.+2      	; 0xa44 <__addsf3x+0x9a>
 a42:	b0 cf       	rjmp	.-160    	; 0x9a4 <__addsf3+0x28>
 a44:	93 95       	inc	r25
 a46:	88 0f       	add	r24, r24
 a48:	08 f0       	brcs	.+2      	; 0xa4c <__addsf3x+0xa2>
 a4a:	99 27       	eor	r25, r25
 a4c:	ee 0f       	add	r30, r30
 a4e:	97 95       	ror	r25
 a50:	87 95       	ror	r24
 a52:	08 95       	ret

00000a54 <__cmpsf2>:
 a54:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_cmp>
 a58:	08 f4       	brcc	.+2      	; 0xa5c <__cmpsf2+0x8>
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	08 95       	ret

00000a5e <__divsf3>:
 a5e:	0e 94 43 05 	call	0xa86	; 0xa86 <__divsf3x>
 a62:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_round>
 a66:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__fp_pscB>
 a6a:	58 f0       	brcs	.+22     	; 0xa82 <__divsf3+0x24>
 a6c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fp_pscA>
 a70:	40 f0       	brcs	.+16     	; 0xa82 <__divsf3+0x24>
 a72:	29 f4       	brne	.+10     	; 0xa7e <__divsf3+0x20>
 a74:	5f 3f       	cpi	r21, 0xFF	; 255
 a76:	29 f0       	breq	.+10     	; 0xa82 <__divsf3+0x24>
 a78:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_inf>
 a7c:	51 11       	cpse	r21, r1
 a7e:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_szero>
 a82:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_nan>

00000a86 <__divsf3x>:
 a86:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_split3>
 a8a:	68 f3       	brcs	.-38     	; 0xa66 <__divsf3+0x8>

00000a8c <__divsf3_pse>:
 a8c:	99 23       	and	r25, r25
 a8e:	b1 f3       	breq	.-20     	; 0xa7c <__divsf3+0x1e>
 a90:	55 23       	and	r21, r21
 a92:	91 f3       	breq	.-28     	; 0xa78 <__divsf3+0x1a>
 a94:	95 1b       	sub	r25, r21
 a96:	55 0b       	sbc	r21, r21
 a98:	bb 27       	eor	r27, r27
 a9a:	aa 27       	eor	r26, r26
 a9c:	62 17       	cp	r22, r18
 a9e:	73 07       	cpc	r23, r19
 aa0:	84 07       	cpc	r24, r20
 aa2:	38 f0       	brcs	.+14     	; 0xab2 <__divsf3_pse+0x26>
 aa4:	9f 5f       	subi	r25, 0xFF	; 255
 aa6:	5f 4f       	sbci	r21, 0xFF	; 255
 aa8:	22 0f       	add	r18, r18
 aaa:	33 1f       	adc	r19, r19
 aac:	44 1f       	adc	r20, r20
 aae:	aa 1f       	adc	r26, r26
 ab0:	a9 f3       	breq	.-22     	; 0xa9c <__divsf3_pse+0x10>
 ab2:	35 d0       	rcall	.+106    	; 0xb1e <__divsf3_pse+0x92>
 ab4:	0e 2e       	mov	r0, r30
 ab6:	3a f0       	brmi	.+14     	; 0xac6 <__divsf3_pse+0x3a>
 ab8:	e0 e8       	ldi	r30, 0x80	; 128
 aba:	32 d0       	rcall	.+100    	; 0xb20 <__divsf3_pse+0x94>
 abc:	91 50       	subi	r25, 0x01	; 1
 abe:	50 40       	sbci	r21, 0x00	; 0
 ac0:	e6 95       	lsr	r30
 ac2:	00 1c       	adc	r0, r0
 ac4:	ca f7       	brpl	.-14     	; 0xab8 <__divsf3_pse+0x2c>
 ac6:	2b d0       	rcall	.+86     	; 0xb1e <__divsf3_pse+0x92>
 ac8:	fe 2f       	mov	r31, r30
 aca:	29 d0       	rcall	.+82     	; 0xb1e <__divsf3_pse+0x92>
 acc:	66 0f       	add	r22, r22
 ace:	77 1f       	adc	r23, r23
 ad0:	88 1f       	adc	r24, r24
 ad2:	bb 1f       	adc	r27, r27
 ad4:	26 17       	cp	r18, r22
 ad6:	37 07       	cpc	r19, r23
 ad8:	48 07       	cpc	r20, r24
 ada:	ab 07       	cpc	r26, r27
 adc:	b0 e8       	ldi	r27, 0x80	; 128
 ade:	09 f0       	breq	.+2      	; 0xae2 <__divsf3_pse+0x56>
 ae0:	bb 0b       	sbc	r27, r27
 ae2:	80 2d       	mov	r24, r0
 ae4:	bf 01       	movw	r22, r30
 ae6:	ff 27       	eor	r31, r31
 ae8:	93 58       	subi	r25, 0x83	; 131
 aea:	5f 4f       	sbci	r21, 0xFF	; 255
 aec:	3a f0       	brmi	.+14     	; 0xafc <__divsf3_pse+0x70>
 aee:	9e 3f       	cpi	r25, 0xFE	; 254
 af0:	51 05       	cpc	r21, r1
 af2:	78 f0       	brcs	.+30     	; 0xb12 <__divsf3_pse+0x86>
 af4:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_inf>
 af8:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_szero>
 afc:	5f 3f       	cpi	r21, 0xFF	; 255
 afe:	e4 f3       	brlt	.-8      	; 0xaf8 <__divsf3_pse+0x6c>
 b00:	98 3e       	cpi	r25, 0xE8	; 232
 b02:	d4 f3       	brlt	.-12     	; 0xaf8 <__divsf3_pse+0x6c>
 b04:	86 95       	lsr	r24
 b06:	77 95       	ror	r23
 b08:	67 95       	ror	r22
 b0a:	b7 95       	ror	r27
 b0c:	f7 95       	ror	r31
 b0e:	9f 5f       	subi	r25, 0xFF	; 255
 b10:	c9 f7       	brne	.-14     	; 0xb04 <__divsf3_pse+0x78>
 b12:	88 0f       	add	r24, r24
 b14:	91 1d       	adc	r25, r1
 b16:	96 95       	lsr	r25
 b18:	87 95       	ror	r24
 b1a:	97 f9       	bld	r25, 7
 b1c:	08 95       	ret
 b1e:	e1 e0       	ldi	r30, 0x01	; 1
 b20:	66 0f       	add	r22, r22
 b22:	77 1f       	adc	r23, r23
 b24:	88 1f       	adc	r24, r24
 b26:	bb 1f       	adc	r27, r27
 b28:	62 17       	cp	r22, r18
 b2a:	73 07       	cpc	r23, r19
 b2c:	84 07       	cpc	r24, r20
 b2e:	ba 07       	cpc	r27, r26
 b30:	20 f0       	brcs	.+8      	; 0xb3a <__divsf3_pse+0xae>
 b32:	62 1b       	sub	r22, r18
 b34:	73 0b       	sbc	r23, r19
 b36:	84 0b       	sbc	r24, r20
 b38:	ba 0b       	sbc	r27, r26
 b3a:	ee 1f       	adc	r30, r30
 b3c:	88 f7       	brcc	.-30     	; 0xb20 <__divsf3_pse+0x94>
 b3e:	e0 95       	com	r30
 b40:	08 95       	ret

00000b42 <__fp_cmp>:
 b42:	99 0f       	add	r25, r25
 b44:	00 08       	sbc	r0, r0
 b46:	55 0f       	add	r21, r21
 b48:	aa 0b       	sbc	r26, r26
 b4a:	e0 e8       	ldi	r30, 0x80	; 128
 b4c:	fe ef       	ldi	r31, 0xFE	; 254
 b4e:	16 16       	cp	r1, r22
 b50:	17 06       	cpc	r1, r23
 b52:	e8 07       	cpc	r30, r24
 b54:	f9 07       	cpc	r31, r25
 b56:	c0 f0       	brcs	.+48     	; 0xb88 <__fp_cmp+0x46>
 b58:	12 16       	cp	r1, r18
 b5a:	13 06       	cpc	r1, r19
 b5c:	e4 07       	cpc	r30, r20
 b5e:	f5 07       	cpc	r31, r21
 b60:	98 f0       	brcs	.+38     	; 0xb88 <__fp_cmp+0x46>
 b62:	62 1b       	sub	r22, r18
 b64:	73 0b       	sbc	r23, r19
 b66:	84 0b       	sbc	r24, r20
 b68:	95 0b       	sbc	r25, r21
 b6a:	39 f4       	brne	.+14     	; 0xb7a <__fp_cmp+0x38>
 b6c:	0a 26       	eor	r0, r26
 b6e:	61 f0       	breq	.+24     	; 0xb88 <__fp_cmp+0x46>
 b70:	23 2b       	or	r18, r19
 b72:	24 2b       	or	r18, r20
 b74:	25 2b       	or	r18, r21
 b76:	21 f4       	brne	.+8      	; 0xb80 <__fp_cmp+0x3e>
 b78:	08 95       	ret
 b7a:	0a 26       	eor	r0, r26
 b7c:	09 f4       	brne	.+2      	; 0xb80 <__fp_cmp+0x3e>
 b7e:	a1 40       	sbci	r26, 0x01	; 1
 b80:	a6 95       	lsr	r26
 b82:	8f ef       	ldi	r24, 0xFF	; 255
 b84:	81 1d       	adc	r24, r1
 b86:	81 1d       	adc	r24, r1
 b88:	08 95       	ret

00000b8a <__fp_inf>:
 b8a:	97 f9       	bld	r25, 7
 b8c:	9f 67       	ori	r25, 0x7F	; 127
 b8e:	80 e8       	ldi	r24, 0x80	; 128
 b90:	70 e0       	ldi	r23, 0x00	; 0
 b92:	60 e0       	ldi	r22, 0x00	; 0
 b94:	08 95       	ret

00000b96 <__fp_nan>:
 b96:	9f ef       	ldi	r25, 0xFF	; 255
 b98:	80 ec       	ldi	r24, 0xC0	; 192
 b9a:	08 95       	ret

00000b9c <__fp_pscA>:
 b9c:	00 24       	eor	r0, r0
 b9e:	0a 94       	dec	r0
 ba0:	16 16       	cp	r1, r22
 ba2:	17 06       	cpc	r1, r23
 ba4:	18 06       	cpc	r1, r24
 ba6:	09 06       	cpc	r0, r25
 ba8:	08 95       	ret

00000baa <__fp_pscB>:
 baa:	00 24       	eor	r0, r0
 bac:	0a 94       	dec	r0
 bae:	12 16       	cp	r1, r18
 bb0:	13 06       	cpc	r1, r19
 bb2:	14 06       	cpc	r1, r20
 bb4:	05 06       	cpc	r0, r21
 bb6:	08 95       	ret

00000bb8 <__fp_round>:
 bb8:	09 2e       	mov	r0, r25
 bba:	03 94       	inc	r0
 bbc:	00 0c       	add	r0, r0
 bbe:	11 f4       	brne	.+4      	; 0xbc4 <__fp_round+0xc>
 bc0:	88 23       	and	r24, r24
 bc2:	52 f0       	brmi	.+20     	; 0xbd8 <__fp_round+0x20>
 bc4:	bb 0f       	add	r27, r27
 bc6:	40 f4       	brcc	.+16     	; 0xbd8 <__fp_round+0x20>
 bc8:	bf 2b       	or	r27, r31
 bca:	11 f4       	brne	.+4      	; 0xbd0 <__fp_round+0x18>
 bcc:	60 ff       	sbrs	r22, 0
 bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__fp_round+0x20>
 bd0:	6f 5f       	subi	r22, 0xFF	; 255
 bd2:	7f 4f       	sbci	r23, 0xFF	; 255
 bd4:	8f 4f       	sbci	r24, 0xFF	; 255
 bd6:	9f 4f       	sbci	r25, 0xFF	; 255
 bd8:	08 95       	ret

00000bda <__fp_split3>:
 bda:	57 fd       	sbrc	r21, 7
 bdc:	90 58       	subi	r25, 0x80	; 128
 bde:	44 0f       	add	r20, r20
 be0:	55 1f       	adc	r21, r21
 be2:	59 f0       	breq	.+22     	; 0xbfa <__fp_splitA+0x10>
 be4:	5f 3f       	cpi	r21, 0xFF	; 255
 be6:	71 f0       	breq	.+28     	; 0xc04 <__fp_splitA+0x1a>
 be8:	47 95       	ror	r20

00000bea <__fp_splitA>:
 bea:	88 0f       	add	r24, r24
 bec:	97 fb       	bst	r25, 7
 bee:	99 1f       	adc	r25, r25
 bf0:	61 f0       	breq	.+24     	; 0xc0a <__fp_splitA+0x20>
 bf2:	9f 3f       	cpi	r25, 0xFF	; 255
 bf4:	79 f0       	breq	.+30     	; 0xc14 <__fp_splitA+0x2a>
 bf6:	87 95       	ror	r24
 bf8:	08 95       	ret
 bfa:	12 16       	cp	r1, r18
 bfc:	13 06       	cpc	r1, r19
 bfe:	14 06       	cpc	r1, r20
 c00:	55 1f       	adc	r21, r21
 c02:	f2 cf       	rjmp	.-28     	; 0xbe8 <__fp_split3+0xe>
 c04:	46 95       	lsr	r20
 c06:	f1 df       	rcall	.-30     	; 0xbea <__fp_splitA>
 c08:	08 c0       	rjmp	.+16     	; 0xc1a <__fp_splitA+0x30>
 c0a:	16 16       	cp	r1, r22
 c0c:	17 06       	cpc	r1, r23
 c0e:	18 06       	cpc	r1, r24
 c10:	99 1f       	adc	r25, r25
 c12:	f1 cf       	rjmp	.-30     	; 0xbf6 <__fp_splitA+0xc>
 c14:	86 95       	lsr	r24
 c16:	71 05       	cpc	r23, r1
 c18:	61 05       	cpc	r22, r1
 c1a:	08 94       	sec
 c1c:	08 95       	ret

00000c1e <__fp_zero>:
 c1e:	e8 94       	clt

00000c20 <__fp_szero>:
 c20:	bb 27       	eor	r27, r27
 c22:	66 27       	eor	r22, r22
 c24:	77 27       	eor	r23, r23
 c26:	cb 01       	movw	r24, r22
 c28:	97 f9       	bld	r25, 7
 c2a:	08 95       	ret

00000c2c <__gesf2>:
 c2c:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_cmp>
 c30:	08 f4       	brcc	.+2      	; 0xc34 <__gesf2+0x8>
 c32:	8f ef       	ldi	r24, 0xFF	; 255
 c34:	08 95       	ret

00000c36 <_exit>:
 c36:	f8 94       	cli

00000c38 <__stop_program>:
 c38:	ff cf       	rjmp	.-2      	; 0xc38 <__stop_program>
