
MicrocontrollerSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000750  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000750  000007c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002085  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ae6  00000000  00000000  00002a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000636  00000000  00000000  0000353b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d8  00000000  00000000  00003b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000083c  00000000  00000000  00003f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001148  00000000  00000000  00004788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000058d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5d 03 	call	0x6ba	; 0x6ba <main>
  7a:	0c 94 a6 03 	jmp	0x74c	; 0x74c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_ZN15MicrocontrollerC1Ev>:


#include "Microcontroller.h"

// default constructor
Microcontroller::Microcontroller()
  82:	08 95       	ret

00000084 <_ZN15Microcontroller10createTaskEPFvvE>:
{
} //~Microcontroller

void Microcontroller::createTask(void (*func)(void))
{
	this->threadInit = func;
  84:	fc 01       	movw	r30, r24
  86:	71 83       	std	Z+1, r23	; 0x01
  88:	60 83       	st	Z, r22
  8a:	08 95       	ret

0000008c <_ZN15Microcontroller7executeEv>:
}

void Microcontroller::execute()
{
	this->threadInit();
  8c:	dc 01       	movw	r26, r24
  8e:	ed 91       	ld	r30, X+
  90:	fc 91       	ld	r31, X
  92:	09 95       	icall
  94:	08 95       	ret

00000096 <_ZN3LED10initializeEv>:
		off();
	return status;
}

void LED::initialize()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	ec 01       	movw	r28, r24
	Output::pinDirection(port, pin, true);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	6c 81       	ldd	r22, Y+4	; 0x04
  a0:	8b 81       	ldd	r24, Y+3	; 0x03
  a2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_ZN6Output12pinDirectionE4PORT3PINb>
	Output::pinStatus(port, pin, false);
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	6c 81       	ldd	r22, Y+4	; 0x04
  aa:	8b 81       	ldd	r24, Y+3	; 0x03
  ac:	0e 94 74 00 	call	0xe8	; 0xe8 <_ZN6Output9pinStatusE4PORT3PINb>
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <_ZN3LEDC1E4PORT3PIN>:
#include "LED.h"
#include <avr/io.h>
#include <util/delay.h>

// default constructor
LED::LED(PORT port, PIN pin)
  b6:	2c e6       	ldi	r18, 0x6C	; 108
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	31 83       	std	Z+1, r19	; 0x01
  be:	20 83       	st	Z, r18
{
	this->port = port;
  c0:	63 83       	std	Z+3, r22	; 0x03
	this->pin = pin;
  c2:	44 83       	std	Z+4, r20	; 0x04
	this->status = false;
  c4:	12 82       	std	Z+2, r1	; 0x02
	initialize();
  c6:	0e 94 4b 00 	call	0x96	; 0x96 <_ZN3LED10initializeEv>
  ca:	08 95       	ret

000000cc <_ZN3LEDD1Ev>:
} //LED

// default destructor
LED::~LED()
  cc:	08 95       	ret

000000ce <_ZN3LED2onEv>:
{
} //~LED

void LED::on()
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	Output::pinStatus(port, pin, true);
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	6c 81       	ldd	r22, Y+4	; 0x04
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	0e 94 74 00 	call	0xe8	; 0xe8 <_ZN6Output9pinStatusE4PORT3PINb>
	status = true;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	8a 83       	std	Y+2, r24	; 0x02
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <_ZN6Output9pinStatusE4PORT3PINb>:

// functions

void Output::pinStatus(PORT port, PIN pin, bool state)
{
	if (state == true)
  e8:	44 23       	and	r20, r20
  ea:	a9 f1       	breq	.+106    	; 0x156 <_ZN6Output9pinStatusE4PORT3PINb+0x6e>
	{
		if (port == IOPORTA)
  ec:	81 11       	cpse	r24, r1
  ee:	0b c0       	rjmp	.+22     	; 0x106 <_ZN6Output9pinStatusE4PORT3PINb+0x1e>
			PORTA |= 1 << pin;
  f0:	2b b3       	in	r18, 0x1b	; 27
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <_ZN6Output9pinStatusE4PORT3PINb+0x14>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <_ZN6Output9pinStatusE4PORT3PINb+0x10>
 100:	82 2b       	or	r24, r18
 102:	8b bb       	out	0x1b, r24	; 27
 104:	08 95       	ret
		else if (port == IOPORTB)
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	59 f4       	brne	.+22     	; 0x120 <_ZN6Output9pinStatusE4PORT3PINb+0x38>
			PORTB |= 1 << pin;
 10a:	28 b3       	in	r18, 0x18	; 24
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <_ZN6Output9pinStatusE4PORT3PINb+0x2e>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <_ZN6Output9pinStatusE4PORT3PINb+0x2a>
 11a:	82 2b       	or	r24, r18
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	08 95       	ret
		else if (port == IOPORTC)
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	59 f4       	brne	.+22     	; 0x13a <_ZN6Output9pinStatusE4PORT3PINb+0x52>
			PORTC |= 1 << pin;
 124:	25 b3       	in	r18, 0x15	; 21
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <_ZN6Output9pinStatusE4PORT3PINb+0x48>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <_ZN6Output9pinStatusE4PORT3PINb+0x44>
 134:	82 2b       	or	r24, r18
 136:	85 bb       	out	0x15, r24	; 21
 138:	08 95       	ret
		else if (port == IOPORTD)
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	09 f0       	breq	.+2      	; 0x140 <_ZN6Output9pinStatusE4PORT3PINb+0x58>
 13e:	43 c0       	rjmp	.+134    	; 0x1c6 <_ZN6Output9pinStatusE4PORT3PINb+0xde>
			PORTD |= 1 << pin;
 140:	22 b3       	in	r18, 0x12	; 18
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <_ZN6Output9pinStatusE4PORT3PINb+0x64>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <_ZN6Output9pinStatusE4PORT3PINb+0x60>
 150:	82 2b       	or	r24, r18
 152:	82 bb       	out	0x12, r24	; 18
 154:	08 95       	ret
	}
	else if (state == false)
	{
		if (port == IOPORTA)
 156:	81 11       	cpse	r24, r1
 158:	0d c0       	rjmp	.+26     	; 0x174 <_ZN6Output9pinStatusE4PORT3PINb+0x8c>
			PORTA &= ~(1 << pin);
 15a:	9b b3       	in	r25, 0x1b	; 27
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	06 2e       	mov	r0, r22
 162:	02 c0       	rjmp	.+4      	; 0x168 <_ZN6Output9pinStatusE4PORT3PINb+0x80>
 164:	22 0f       	add	r18, r18
 166:	33 1f       	adc	r19, r19
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <_ZN6Output9pinStatusE4PORT3PINb+0x7c>
 16c:	20 95       	com	r18
 16e:	29 23       	and	r18, r25
 170:	2b bb       	out	0x1b, r18	; 27
 172:	1c c0       	rjmp	.+56     	; 0x1ac <_ZN6Output9pinStatusE4PORT3PINb+0xc4>
		if (port == IOPORTB)
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	61 f4       	brne	.+24     	; 0x190 <_ZN6Output9pinStatusE4PORT3PINb+0xa8>
			PORTB &= ~(1 << pin);
 178:	28 b3       	in	r18, 0x18	; 24
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <_ZN6Output9pinStatusE4PORT3PINb+0x9c>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <_ZN6Output9pinStatusE4PORT3PINb+0x98>
 188:	80 95       	com	r24
 18a:	82 23       	and	r24, r18
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	08 95       	ret
		if (port == IOPORTC)
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	61 f4       	brne	.+24     	; 0x1ac <_ZN6Output9pinStatusE4PORT3PINb+0xc4>
			PORTC &= ~(1 << pin);
 194:	25 b3       	in	r18, 0x15	; 21
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <_ZN6Output9pinStatusE4PORT3PINb+0xb8>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <_ZN6Output9pinStatusE4PORT3PINb+0xb4>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	85 bb       	out	0x15, r24	; 21
 1aa:	08 95       	ret
		if (port == IOPORTD)
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	59 f4       	brne	.+22     	; 0x1c6 <_ZN6Output9pinStatusE4PORT3PINb+0xde>
			PORTD &= ~(1 << pin);
 1b0:	22 b3       	in	r18, 0x12	; 18
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <_ZN6Output9pinStatusE4PORT3PINb+0xd4>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <_ZN6Output9pinStatusE4PORT3PINb+0xd0>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	82 bb       	out	0x12, r24	; 18
 1c6:	08 95       	ret

000001c8 <_ZN6Output12pinDirectionE4PORT3PINb>:
	}
}

void Output::pinDirection(PORT port, PIN pin, bool state)
{
	if (state == true)
 1c8:	44 23       	and	r20, r20
 1ca:	a9 f1       	breq	.+106    	; 0x236 <_ZN6Output12pinDirectionE4PORT3PINb+0x6e>
	{
		if (port == IOPORTA)
 1cc:	81 11       	cpse	r24, r1
 1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <_ZN6Output12pinDirectionE4PORT3PINb+0x1e>
			DDRA |= 1 << pin;
 1d0:	2a b3       	in	r18, 0x1a	; 26
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <_ZN6Output12pinDirectionE4PORT3PINb+0x14>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <_ZN6Output12pinDirectionE4PORT3PINb+0x10>
 1e0:	82 2b       	or	r24, r18
 1e2:	8a bb       	out	0x1a, r24	; 26
 1e4:	08 95       	ret
		else if (port == IOPORTB)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	59 f4       	brne	.+22     	; 0x200 <_ZN6Output12pinDirectionE4PORT3PINb+0x38>
			DDRB |= 1 << pin;
 1ea:	27 b3       	in	r18, 0x17	; 23
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_ZN6Output12pinDirectionE4PORT3PINb+0x2e>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <_ZN6Output12pinDirectionE4PORT3PINb+0x2a>
 1fa:	82 2b       	or	r24, r18
 1fc:	87 bb       	out	0x17, r24	; 23
 1fe:	08 95       	ret
		else if (port == IOPORTC)
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	59 f4       	brne	.+22     	; 0x21a <_ZN6Output12pinDirectionE4PORT3PINb+0x52>
			DDRC |= 1 << pin;
 204:	24 b3       	in	r18, 0x14	; 20
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <_ZN6Output12pinDirectionE4PORT3PINb+0x48>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <_ZN6Output12pinDirectionE4PORT3PINb+0x44>
 214:	82 2b       	or	r24, r18
 216:	84 bb       	out	0x14, r24	; 20
 218:	08 95       	ret
		else if (port == IOPORTD)
 21a:	83 30       	cpi	r24, 0x03	; 3
 21c:	09 f0       	breq	.+2      	; 0x220 <_ZN6Output12pinDirectionE4PORT3PINb+0x58>
 21e:	43 c0       	rjmp	.+134    	; 0x2a6 <_ZN6Output12pinDirectionE4PORT3PINb+0xde>
			DDRD |= 1 << pin;
 220:	21 b3       	in	r18, 0x11	; 17
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <_ZN6Output12pinDirectionE4PORT3PINb+0x64>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <_ZN6Output12pinDirectionE4PORT3PINb+0x60>
 230:	82 2b       	or	r24, r18
 232:	81 bb       	out	0x11, r24	; 17
 234:	08 95       	ret
	}
	else if (state == false)
	{
		if (port == IOPORTA)
 236:	81 11       	cpse	r24, r1
 238:	0d c0       	rjmp	.+26     	; 0x254 <_ZN6Output12pinDirectionE4PORT3PINb+0x8c>
			DDRA &= ~(1 << pin);
 23a:	9a b3       	in	r25, 0x1a	; 26
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	06 2e       	mov	r0, r22
 242:	02 c0       	rjmp	.+4      	; 0x248 <_ZN6Output12pinDirectionE4PORT3PINb+0x80>
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <_ZN6Output12pinDirectionE4PORT3PINb+0x7c>
 24c:	20 95       	com	r18
 24e:	29 23       	and	r18, r25
 250:	2a bb       	out	0x1a, r18	; 26
 252:	1c c0       	rjmp	.+56     	; 0x28c <_ZN6Output12pinDirectionE4PORT3PINb+0xc4>
		if (port == IOPORTB)
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	61 f4       	brne	.+24     	; 0x270 <_ZN6Output12pinDirectionE4PORT3PINb+0xa8>
			DDRB &= ~(1 << pin);
 258:	27 b3       	in	r18, 0x17	; 23
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <_ZN6Output12pinDirectionE4PORT3PINb+0x9c>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <_ZN6Output12pinDirectionE4PORT3PINb+0x98>
 268:	80 95       	com	r24
 26a:	82 23       	and	r24, r18
 26c:	87 bb       	out	0x17, r24	; 23
 26e:	08 95       	ret
		if (port == IOPORTC)
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	61 f4       	brne	.+24     	; 0x28c <_ZN6Output12pinDirectionE4PORT3PINb+0xc4>
			DDRC &= ~(1 << pin);
 274:	24 b3       	in	r18, 0x14	; 20
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <_ZN6Output12pinDirectionE4PORT3PINb+0xb8>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <_ZN6Output12pinDirectionE4PORT3PINb+0xb4>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	84 bb       	out	0x14, r24	; 20
 28a:	08 95       	ret
		if (port == IOPORTD)
 28c:	83 30       	cpi	r24, 0x03	; 3
 28e:	59 f4       	brne	.+22     	; 0x2a6 <_ZN6Output12pinDirectionE4PORT3PINb+0xde>
			DDRD &= ~(1 << pin);
 290:	21 b3       	in	r18, 0x11	; 17
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <_ZN6Output12pinDirectionE4PORT3PINb+0xd4>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <_ZN6Output12pinDirectionE4PORT3PINb+0xd0>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	81 bb       	out	0x11, r24	; 17
 2a6:	08 95       	ret

000002a8 <_ZN6Output10portStatusE4PORTi>:
	}
}

void Output::portStatus(PORT port, int state)
{
	if (port == IOPORTA)
 2a8:	81 11       	cpse	r24, r1
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <_ZN6Output10portStatusE4PORTi+0x8>
		PORTA = state;
 2ac:	6b bb       	out	0x1b, r22	; 27
 2ae:	08 95       	ret
	else if (port == IOPORTB)
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	11 f4       	brne	.+4      	; 0x2b8 <_ZN6Output10portStatusE4PORTi+0x10>
		PORTB = state;
 2b4:	68 bb       	out	0x18, r22	; 24
 2b6:	08 95       	ret
	else if (port == IOPORTC)
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	11 f4       	brne	.+4      	; 0x2c0 <_ZN6Output10portStatusE4PORTi+0x18>
		PORTC = state;
 2bc:	65 bb       	out	0x15, r22	; 21
 2be:	08 95       	ret
	else if (port == IOPORTD)
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <_ZN6Output10portStatusE4PORTi+0x1e>
		PORTD = state;
 2c4:	62 bb       	out	0x12, r22	; 18
 2c6:	08 95       	ret

000002c8 <_ZN6Output13portDirectionE4PORTi>:
}

void Output::portDirection(PORT port, int state)
{
	if (port == IOPORTA)
 2c8:	81 11       	cpse	r24, r1
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <_ZN6Output13portDirectionE4PORTi+0x8>
		DDRA = state;
 2cc:	6a bb       	out	0x1a, r22	; 26
 2ce:	08 95       	ret
	else if (port == IOPORTB)
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <_ZN6Output13portDirectionE4PORTi+0x10>
		DDRB = state;
 2d4:	67 bb       	out	0x17, r22	; 23
 2d6:	08 95       	ret
	else if (port == IOPORTC)
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	11 f4       	brne	.+4      	; 0x2e0 <_ZN6Output13portDirectionE4PORTi+0x18>
		DDRC = state;
 2dc:	64 bb       	out	0x14, r22	; 20
 2de:	08 95       	ret
	else if (port == IOPORTD)
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <_ZN6Output13portDirectionE4PORTi+0x1e>
		DDRD = state;
 2e4:	61 bb       	out	0x11, r22	; 17
 2e6:	08 95       	ret

000002e8 <_ZN6Output9pinStatusE4PORT3PIN>:
}

bool Output::pinStatus(PORT port, PIN pin)
{
	if (port == IOPORTA)
 2e8:	81 11       	cpse	r24, r1
 2ea:	09 c0       	rjmp	.+18     	; 0x2fe <_ZN6Output9pinStatusE4PORT3PIN+0x16>
		return (DDRA & (1 << pin)) != 0;
 2ec:	8a b3       	in	r24, 0x1a	; 26
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <_ZN6Output9pinStatusE4PORT3PIN+0xe>
 2f2:	95 95       	asr	r25
 2f4:	87 95       	ror	r24
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <_ZN6Output9pinStatusE4PORT3PIN+0xa>
 2fa:	81 70       	andi	r24, 0x01	; 1
 2fc:	08 95       	ret
	else if (port == IOPORTB)
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	49 f4       	brne	.+18     	; 0x314 <_ZN6Output9pinStatusE4PORT3PIN+0x2c>
		return (DDRB & (1 << pin)) != 0;
 302:	87 b3       	in	r24, 0x17	; 23
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <_ZN6Output9pinStatusE4PORT3PIN+0x24>
 308:	95 95       	asr	r25
 30a:	87 95       	ror	r24
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <_ZN6Output9pinStatusE4PORT3PIN+0x20>
 310:	81 70       	andi	r24, 0x01	; 1
 312:	08 95       	ret
	else if (port == IOPORTC)
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	49 f4       	brne	.+18     	; 0x32a <_ZN6Output9pinStatusE4PORT3PIN+0x42>
		return (DDRC & (1 << pin)) != 0;
 318:	84 b3       	in	r24, 0x14	; 20
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <_ZN6Output9pinStatusE4PORT3PIN+0x3a>
 31e:	95 95       	asr	r25
 320:	87 95       	ror	r24
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <_ZN6Output9pinStatusE4PORT3PIN+0x36>
 326:	81 70       	andi	r24, 0x01	; 1
 328:	08 95       	ret
	else if (port == IOPORTD)
 32a:	83 30       	cpi	r24, 0x03	; 3
 32c:	49 f4       	brne	.+18     	; 0x340 <_ZN6Output9pinStatusE4PORT3PIN+0x58>
		return (DDRD & (1 << pin)) != 0;
 32e:	81 b3       	in	r24, 0x11	; 17
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <_ZN6Output9pinStatusE4PORT3PIN+0x50>
 334:	95 95       	asr	r25
 336:	87 95       	ror	r24
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <_ZN6Output9pinStatusE4PORT3PIN+0x4c>
 33c:	81 70       	andi	r24, 0x01	; 1
 33e:	08 95       	ret
	else
		return false;
 340:	80 e0       	ldi	r24, 0x00	; 0
}
 342:	08 95       	ret

00000344 <_ZN15ParallelTextLCDD1Ev>:
	this->pinEN = pinEN;
	initialize();
} 

// default destructor
ParallelTextLCD::~ParallelTextLCD()
 344:	08 95       	ret

00000346 <_ZN15ParallelTextLCD13action_enableEv>:
		action_enable();
	Output::portDirection(dataPort, 0xFF);
}

void ParallelTextLCD::action_enable(void)
{
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	ec 01       	movw	r28, r24
	Output::pinStatus(controlPort, pinEN, true);
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	6c 81       	ldd	r22, Y+4	; 0x04
 350:	8b 81       	ldd	r24, Y+3	; 0x03
 352:	0e 94 74 00 	call	0xe8	; 0xe8 <_ZN6Output9pinStatusE4PORT3PINb>
	asm volatile ("nop");
 356:	00 00       	nop
	asm volatile ("nop");
 358:	00 00       	nop
	Output::pinStatus(controlPort, pinEN, false);
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	6c 81       	ldd	r22, Y+4	; 0x04
 35e:	8b 81       	ldd	r24, Y+3	; 0x03
 360:	0e 94 74 00 	call	0xe8	; 0xe8 <_ZN6Output9pinStatusE4PORT3PINb>
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <_ZN15ParallelTextLCD9wait_busyEv>:
	action_enable();
	Output::portStatus(dataPort, 0x00);
}

void ParallelTextLCD::wait_busy(void)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	ec 01       	movw	r28, r24
	Output::portDirection(dataPort, 0x00);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_ZN6Output13portDirectionE4PORTi>
	Output::pinStatus(controlPort, pinRW, true);
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	6d 81       	ldd	r22, Y+5	; 0x05
 37e:	8b 81       	ldd	r24, Y+3	; 0x03
 380:	0e 94 74 00 	call	0xe8	; 0xe8 <_ZN6Output9pinStatusE4PORT3PINb>
	Output::pinStatus(controlPort, pinRS, false);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	6e 81       	ldd	r22, Y+6	; 0x06
 388:	8b 81       	ldd	r24, Y+3	; 0x03
 38a:	0e 94 74 00 	call	0xe8	; 0xe8 <_ZN6Output9pinStatusE4PORT3PINb>
	while (Output::pinStatus(dataPort, IOPIN7) == true)
 38e:	03 c0       	rjmp	.+6      	; 0x396 <_ZN15ParallelTextLCD9wait_busyEv+0x2c>
		action_enable();
 390:	ce 01       	movw	r24, r28
 392:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN15ParallelTextLCD13action_enableEv>
void ParallelTextLCD::wait_busy(void)
{
	Output::portDirection(dataPort, 0x00);
	Output::pinStatus(controlPort, pinRW, true);
	Output::pinStatus(controlPort, pinRS, false);
	while (Output::pinStatus(dataPort, IOPIN7) == true)
 396:	67 e0       	ldi	r22, 0x07	; 7
 398:	8a 81       	ldd	r24, Y+2	; 0x02
 39a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_ZN6Output9pinStatusE4PORT3PIN>
 39e:	81 11       	cpse	r24, r1
 3a0:	f7 cf       	rjmp	.-18     	; 0x390 <_ZN15ParallelTextLCD9wait_busyEv+0x26>
		action_enable();
	Output::portDirection(dataPort, 0xFF);
 3a2:	6f ef       	ldi	r22, 0xFF	; 255
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_ZN6Output13portDirectionE4PORTi>
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <_ZN15ParallelTextLCD7commandEh>:
		command(0b00001111);
	_delay_us(50);
}

void ParallelTextLCD::command(unsigned char cmd)
{
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	ec 01       	movw	r28, r24
 3ba:	16 2f       	mov	r17, r22
	wait_busy();
 3bc:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN15ParallelTextLCD9wait_busyEv>
	Output::portStatus(dataPort, cmd);
 3c0:	61 2f       	mov	r22, r17
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	8a 81       	ldd	r24, Y+2	; 0x02
 3c6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN6Output10portStatusE4PORTi>
	Output::pinStatus(controlPort, pinRW, false);
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	6d 81       	ldd	r22, Y+5	; 0x05
 3ce:	8b 81       	ldd	r24, Y+3	; 0x03
 3d0:	0e 94 74 00 	call	0xe8	; 0xe8 <_ZN6Output9pinStatusE4PORT3PINb>
	Output::pinStatus(controlPort, pinRS, false);
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	6e 81       	ldd	r22, Y+6	; 0x06
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	0e 94 74 00 	call	0xe8	; 0xe8 <_ZN6Output9pinStatusE4PORT3PINb>
	action_enable();
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN15ParallelTextLCD13action_enableEv>
	Output::portStatus(dataPort, 0x00);
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN6Output10portStatusE4PORTi>
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	08 95       	ret

000003f6 <_ZN15ParallelTextLCD10initializeEv>:
ParallelTextLCD::~ParallelTextLCD()
{
}

void ParallelTextLCD::initialize()
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	ec 01       	movw	r28, r24
	Output::pinDirection(controlPort, pinRS, true);
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	6e 81       	ldd	r22, Y+6	; 0x06
 400:	8b 81       	ldd	r24, Y+3	; 0x03
 402:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_ZN6Output12pinDirectionE4PORT3PINb>
	Output::pinDirection(controlPort, pinRW, true);
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	6d 81       	ldd	r22, Y+5	; 0x05
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_ZN6Output12pinDirectionE4PORT3PINb>
	Output::pinDirection(controlPort, pinEN, true);
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	6c 81       	ldd	r22, Y+4	; 0x04
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_ZN6Output12pinDirectionE4PORT3PINb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41a:	85 ea       	ldi	r24, 0xA5	; 165
 41c:	9e e0       	ldi	r25, 0x0E	; 14
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <_ZN15ParallelTextLCD10initializeEv+0x28>
 422:	00 c0       	rjmp	.+0      	; 0x424 <_ZN15ParallelTextLCD10initializeEv+0x2e>
 424:	00 00       	nop
	_delay_ms(15);
	command(0x01); // Clear Screen
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN15ParallelTextLCD7commandEh>
 42e:	83 ef       	ldi	r24, 0xF3	; 243
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <_ZN15ParallelTextLCD10initializeEv+0x3c>
 436:	00 c0       	rjmp	.+0      	; 0x438 <_ZN15ParallelTextLCD10initializeEv+0x42>
 438:	00 00       	nop
	_delay_ms(2);
	command(0x38); // Set up LCD 8-bit mode
 43a:	68 e3       	ldi	r22, 0x38	; 56
 43c:	ce 01       	movw	r24, r28
 43e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN15ParallelTextLCD7commandEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 442:	90 e1       	ldi	r25, 0x10	; 16
 444:	9a 95       	dec	r25
 446:	f1 f7       	brne	.-4      	; 0x444 <_ZN15ParallelTextLCD10initializeEv+0x4e>
 448:	00 c0       	rjmp	.+0      	; 0x44a <_ZN15ParallelTextLCD10initializeEv+0x54>
	_delay_us(50);
	command(0b00001100); // Bit 3: Use function |2: Show Display |1: Show Cursor |0: Blinking Cursor
 44a:	6c e0       	ldi	r22, 0x0C	; 12
 44c:	ce 01       	movw	r24, r28
 44e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN15ParallelTextLCD7commandEh>
 452:	80 e1       	ldi	r24, 0x10	; 16
 454:	8a 95       	dec	r24
 456:	f1 f7       	brne	.-4      	; 0x454 <_ZN15ParallelTextLCD10initializeEv+0x5e>
 458:	00 c0       	rjmp	.+0      	; 0x45a <_ZN15ParallelTextLCD10initializeEv+0x64>
	_delay_us(50);
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <_ZN15ParallelTextLCDC1E4PORTS0_3PINS1_S1_>:
#include <avr/io.h>
#include <stdlib.h>
#include <util/delay.h>

// default constructor
ParallelTextLCD::ParallelTextLCD(PORT portData, PORT portControl, PIN pinRS, PIN pinRW, PIN pinEN)
 460:	ef 92       	push	r14
 462:	0f 93       	push	r16
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	ec 01       	movw	r28, r24
 46a:	84 e7       	ldi	r24, 0x74	; 116
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	99 83       	std	Y+1, r25	; 0x01
 470:	88 83       	st	Y, r24
 472:	88 e0       	ldi	r24, 0x08	; 8
 474:	e0 e6       	ldi	r30, 0x60	; 96
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	de 01       	movw	r26, r28
 47a:	17 96       	adiw	r26, 0x07	; 7
 47c:	01 90       	ld	r0, Z+
 47e:	0d 92       	st	X+, r0
 480:	8a 95       	dec	r24
 482:	e1 f7       	brne	.-8      	; 0x47c <_ZN15ParallelTextLCDC1E4PORTS0_3PINS1_S1_+0x1c>
{
	this->dataPort = portData;
 484:	6a 83       	std	Y+2, r22	; 0x02
	this->controlPort = portControl;
 486:	4b 83       	std	Y+3, r20	; 0x03
	this->pinRS = pinRS;
 488:	2e 83       	std	Y+6, r18	; 0x06
	this->pinRW = pinRW;
 48a:	0d 83       	std	Y+5, r16	; 0x05
	this->pinEN = pinEN;
 48c:	ec 82       	std	Y+4, r14	; 0x04
	initialize();
 48e:	ce 01       	movw	r24, r28
 490:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN15ParallelTextLCD10initializeEv>
} 
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	0f 91       	pop	r16
 49a:	ef 90       	pop	r14
 49c:	08 95       	ret

0000049e <_ZN15ParallelTextLCD8positionEii>:
	while(*str > 0)
		character(*str++);
}

void ParallelTextLCD::position(int x, int y)
{
 49e:	60 58       	subi	r22, 0x80	; 128
	command(0x80 + this->rowPositions[y] + x);
 4a0:	fa 01       	movw	r30, r20
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	e8 0f       	add	r30, r24
 4a8:	f9 1f       	adc	r31, r25
 4aa:	27 81       	ldd	r18, Z+7	; 0x07
 4ac:	62 0f       	add	r22, r18
 4ae:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN15ParallelTextLCD7commandEh>
 4b2:	08 95       	ret

000004b4 <_ZN15ParallelTextLCD6cursorEbb>:
	_delay_ms(2);
}

void ParallelTextLCD::cursor(bool visible, bool blink)
{
	if (!visible)
 4b4:	61 11       	cpse	r22, r1
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <_ZN15ParallelTextLCD6cursorEbb+0xc>
		command(0b00001100);
 4b8:	6c e0       	ldi	r22, 0x0C	; 12
 4ba:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN15ParallelTextLCD7commandEh>
 4be:	09 c0       	rjmp	.+18     	; 0x4d2 <_ZN15ParallelTextLCD6cursorEbb+0x1e>
	else if (visible && !blink)
 4c0:	41 11       	cpse	r20, r1
 4c2:	04 c0       	rjmp	.+8      	; 0x4cc <_ZN15ParallelTextLCD6cursorEbb+0x18>
		command(0b00001110);
 4c4:	6e e0       	ldi	r22, 0x0E	; 14
 4c6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN15ParallelTextLCD7commandEh>
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <_ZN15ParallelTextLCD6cursorEbb+0x1e>
	else if (visible && blink)
		command(0b00001111);
 4cc:	6f e0       	ldi	r22, 0x0F	; 15
 4ce:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN15ParallelTextLCD7commandEh>
 4d2:	80 e1       	ldi	r24, 0x10	; 16
 4d4:	8a 95       	dec	r24
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <_ZN15ParallelTextLCD6cursorEbb+0x20>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <_ZN15ParallelTextLCD6cursorEbb+0x26>
 4da:	08 95       	ret

000004dc <_ZN15ParallelTextLCD9characterEh>:
	action_enable();
	Output::portStatus(dataPort, 0x00);
}

void ParallelTextLCD::character(unsigned char chr)
{
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	ec 01       	movw	r28, r24
 4e4:	16 2f       	mov	r17, r22
	wait_busy();
 4e6:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN15ParallelTextLCD9wait_busyEv>
	Output::portStatus(dataPort, chr);
 4ea:	61 2f       	mov	r22, r17
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN6Output10portStatusE4PORTi>
	Output::pinStatus(controlPort, pinRW, false);
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	6d 81       	ldd	r22, Y+5	; 0x05
 4f8:	8b 81       	ldd	r24, Y+3	; 0x03
 4fa:	0e 94 74 00 	call	0xe8	; 0xe8 <_ZN6Output9pinStatusE4PORT3PINb>
	Output::pinStatus(controlPort, pinRS, true);
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	6e 81       	ldd	r22, Y+6	; 0x06
 502:	8b 81       	ldd	r24, Y+3	; 0x03
 504:	0e 94 74 00 	call	0xe8	; 0xe8 <_ZN6Output9pinStatusE4PORT3PINb>
	action_enable();
 508:	ce 01       	movw	r24, r28
 50a:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN15ParallelTextLCD13action_enableEv>
	Output::portStatus(dataPort, 0x00);
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	8a 81       	ldd	r24, Y+2	; 0x02
 514:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN6Output10portStatusE4PORTi>
}
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	08 95       	ret

00000520 <_ZN15ParallelTextLCD6stringEPc>:
	position(x, y);
	string(str);
}

void ParallelTextLCD::string(char* str)
{
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	eb 01       	movw	r28, r22
	while(*str > 0)
 52a:	68 81       	ld	r22, Y
 52c:	66 23       	and	r22, r22
 52e:	41 f0       	breq	.+16     	; 0x540 <_ZN15ParallelTextLCD6stringEPc+0x20>
 530:	8c 01       	movw	r16, r24
 532:	21 96       	adiw	r28, 0x01	; 1
		character(*str++);
 534:	c8 01       	movw	r24, r16
 536:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_ZN15ParallelTextLCD9characterEh>
	string(str);
}

void ParallelTextLCD::string(char* str)
{
	while(*str > 0)
 53a:	69 91       	ld	r22, Y+
 53c:	61 11       	cpse	r22, r1
 53e:	fa cf       	rjmp	.-12     	; 0x534 <_ZN15ParallelTextLCD6stringEPc+0x14>
		character(*str++);
}
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	08 95       	ret

0000054a <_ZN15ParallelTextLCD6stringEiiPc>:
	for (int i = 0; i < digits; i++) string(" ");
	string(str);
}

void ParallelTextLCD::string(int x, int y, char* str)
{
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	ec 01       	movw	r28, r24
 554:	89 01       	movw	r16, r18
	position(x, y);
 556:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN15ParallelTextLCD8positionEii>
	string(str);
 55a:	b8 01       	movw	r22, r16
 55c:	ce 01       	movw	r24, r28
 55e:	0e 94 90 02 	call	0x520	; 0x520 <_ZN15ParallelTextLCD6stringEPc>
}
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	08 95       	ret

0000056c <_ZN15ParallelTextLCD7integerEiiii>:
	command(0b00001100); // Bit 3: Use function |2: Show Display |1: Show Cursor |0: Blinking Cursor
	_delay_us(50);
}

void ParallelTextLCD::integer(int x, int y, int num, int digits)
{
 56c:	4f 92       	push	r4
 56e:	5f 92       	push	r5
 570:	6f 92       	push	r6
 572:	7f 92       	push	r7
 574:	8f 92       	push	r8
 576:	9f 92       	push	r9
 578:	af 92       	push	r10
 57a:	bf 92       	push	r11
 57c:	cf 92       	push	r12
 57e:	df 92       	push	r13
 580:	ef 92       	push	r14
 582:	ff 92       	push	r15
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	6c 01       	movw	r12, r24
 592:	5b 01       	movw	r10, r22
 594:	4a 01       	movw	r8, r20
 596:	c9 01       	movw	r24, r18
	char str[digits];
	itoa(num, str, 10);
	for (int i = 0; i < digits; i++) string(" ");
	string(x, y, str);
}
 598:	6d b6       	in	r6, 0x3d	; 61
 59a:	7e b6       	in	r7, 0x3e	; 62
	_delay_us(50);
}

void ParallelTextLCD::integer(int x, int y, int num, int digits)
{
	char str[digits];
 59c:	2d b7       	in	r18, 0x3d	; 61
 59e:	3e b7       	in	r19, 0x3e	; 62
 5a0:	20 1b       	sub	r18, r16
 5a2:	31 0b       	sbc	r19, r17
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	3e bf       	out	0x3e, r19	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	2d bf       	out	0x3d, r18	; 61
 5ae:	2f 5f       	subi	r18, 0xFF	; 255
 5b0:	3f 4f       	sbci	r19, 0xFF	; 255
 5b2:	29 01       	movw	r4, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5b4:	4a e0       	ldi	r20, 0x0A	; 10
 5b6:	b9 01       	movw	r22, r18
 5b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__itoa_ncheck>
	itoa(num, str, 10);
	for (int i = 0; i < digits; i++) string(" ");
 5bc:	10 16       	cp	r1, r16
 5be:	11 06       	cpc	r1, r17
 5c0:	6c f4       	brge	.+26     	; 0x5dc <_ZN15ParallelTextLCD7integerEiiii+0x70>
 5c2:	e1 2c       	mov	r14, r1
 5c4:	f1 2c       	mov	r15, r1
 5c6:	6e e6       	ldi	r22, 0x6E	; 110
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	c6 01       	movw	r24, r12
 5cc:	0e 94 90 02 	call	0x520	; 0x520 <_ZN15ParallelTextLCD6stringEPc>
 5d0:	3f ef       	ldi	r19, 0xFF	; 255
 5d2:	e3 1a       	sub	r14, r19
 5d4:	f3 0a       	sbc	r15, r19
 5d6:	e0 16       	cp	r14, r16
 5d8:	f1 06       	cpc	r15, r17
 5da:	a9 f7       	brne	.-22     	; 0x5c6 <_ZN15ParallelTextLCD7integerEiiii+0x5a>
	string(x, y, str);
 5dc:	92 01       	movw	r18, r4
 5de:	a4 01       	movw	r20, r8
 5e0:	b5 01       	movw	r22, r10
 5e2:	c6 01       	movw	r24, r12
 5e4:	0e 94 a5 02 	call	0x54a	; 0x54a <_ZN15ParallelTextLCD6stringEiiPc>
}
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	f8 94       	cli
 5ec:	7e be       	out	0x3e, r7	; 62
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	6d be       	out	0x3d, r6	; 61
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	1f 91       	pop	r17
 5f8:	0f 91       	pop	r16
 5fa:	ff 90       	pop	r15
 5fc:	ef 90       	pop	r14
 5fe:	df 90       	pop	r13
 600:	cf 90       	pop	r12
 602:	bf 90       	pop	r11
 604:	af 90       	pop	r10
 606:	9f 90       	pop	r9
 608:	8f 90       	pop	r8
 60a:	7f 90       	pop	r7
 60c:	6f 90       	pop	r6
 60e:	5f 90       	pop	r5
 610:	4f 90       	pop	r4
 612:	08 95       	ret

00000614 <_Z10initSystemv>:
    }
	return 0;
}

void initSystem()
{
 614:	ef 92       	push	r14
 616:	0f 93       	push	r16
 618:	1f 93       	push	r17
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	64 97       	sbiw	r28, 0x14	; 20
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	de bf       	out	0x3e, r29	; 62
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	cd bf       	out	0x3d, r28	; 61
	LED led(IOPORTC, IOPIN6);
 62e:	46 e0       	ldi	r20, 0x06	; 6
 630:	62 e0       	ldi	r22, 0x02	; 2
 632:	ce 01       	movw	r24, r28
 634:	40 96       	adiw	r24, 0x10	; 16
 636:	0e 94 5b 00 	call	0xb6	; 0xb6 <_ZN3LEDC1E4PORT3PIN>
	ParallelTextLCD lcd(IOPORTB, IOPORTD, IOPIN2, IOPIN7, IOPIN5);
 63a:	0f 2e       	mov	r0, r31
 63c:	f5 e0       	ldi	r31, 0x05	; 5
 63e:	ef 2e       	mov	r14, r31
 640:	f0 2d       	mov	r31, r0
 642:	07 e0       	ldi	r16, 0x07	; 7
 644:	22 e0       	ldi	r18, 0x02	; 2
 646:	43 e0       	ldi	r20, 0x03	; 3
 648:	61 e0       	ldi	r22, 0x01	; 1
 64a:	ce 01       	movw	r24, r28
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	0e 94 30 02 	call	0x460	; 0x460 <_ZN15ParallelTextLCDC1E4PORTS0_3PINS1_S1_>
	led.on();
 652:	ce 01       	movw	r24, r28
 654:	40 96       	adiw	r24, 0x10	; 16
 656:	0e 94 67 00 	call	0xce	; 0xce <_ZN3LED2onEv>
	lcd.string(0, 0, "Hello Controller");
 65a:	26 e7       	ldi	r18, 0x76	; 118
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	40 e0       	ldi	r20, 0x00	; 0
 660:	50 e0       	ldi	r21, 0x00	; 0
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	ce 01       	movw	r24, r28
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	0e 94 a5 02 	call	0x54a	; 0x54a <_ZN15ParallelTextLCD6stringEiiPc>
	lcd.integer(5, 1, 1309, 5);
 66e:	05 e0       	ldi	r16, 0x05	; 5
 670:	10 e0       	ldi	r17, 0x00	; 0
 672:	2d e1       	ldi	r18, 0x1D	; 29
 674:	35 e0       	ldi	r19, 0x05	; 5
 676:	41 e0       	ldi	r20, 0x01	; 1
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	65 e0       	ldi	r22, 0x05	; 5
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	ce 01       	movw	r24, r28
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN15ParallelTextLCD7integerEiiii>
	lcd.cursor(true, true);
 686:	41 e0       	ldi	r20, 0x01	; 1
 688:	61 e0       	ldi	r22, 0x01	; 1
 68a:	ce 01       	movw	r24, r28
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN15ParallelTextLCD6cursorEbb>
}

void initSystem()
{
	LED led(IOPORTC, IOPIN6);
	ParallelTextLCD lcd(IOPORTB, IOPORTD, IOPIN2, IOPIN7, IOPIN5);
 692:	ce 01       	movw	r24, r28
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN15ParallelTextLCDD1Ev>
	led.on();
	lcd.string(0, 0, "Hello Controller");
	lcd.integer(5, 1, 1309, 5);
	lcd.cursor(true, true);
 69a:	ce 01       	movw	r24, r28
 69c:	40 96       	adiw	r24, 0x10	; 16
 69e:	0e 94 66 00 	call	0xcc	; 0xcc <_ZN3LEDD1Ev>
 6a2:	64 96       	adiw	r28, 0x14	; 20
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	f8 94       	cli
 6a8:	de bf       	out	0x3e, r29	; 62
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	cd bf       	out	0x3d, r28	; 61
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	ef 90       	pop	r14
 6b8:	08 95       	ret

000006ba <main>:
#include "controller/Microcontroller.h"

void initSystem();

int main(void)
{
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <main+0x6>
 6c0:	cd b7       	in	r28, 0x3d	; 61
 6c2:	de b7       	in	r29, 0x3e	; 62
	Microcontroller atmega32;
 6c4:	ce 01       	movw	r24, r28
 6c6:	01 96       	adiw	r24, 0x01	; 1
 6c8:	0e 94 41 00 	call	0x82	; 0x82 <_ZN15MicrocontrollerC1Ev>
	atmega32.createTask(initSystem);
 6cc:	6a e0       	ldi	r22, 0x0A	; 10
 6ce:	73 e0       	ldi	r23, 0x03	; 3
 6d0:	ce 01       	movw	r24, r28
 6d2:	01 96       	adiw	r24, 0x01	; 1
 6d4:	0e 94 42 00 	call	0x84	; 0x84 <_ZN15Microcontroller10createTaskEPFvvE>
	atmega32.execute();
 6d8:	ce 01       	movw	r24, r28
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	0e 94 46 00 	call	0x8c	; 0x8c <_ZN15Microcontroller7executeEv>
 6e0:	ff cf       	rjmp	.-2      	; 0x6e0 <main+0x26>

000006e2 <__itoa_ncheck>:
 6e2:	bb 27       	eor	r27, r27
 6e4:	4a 30       	cpi	r20, 0x0A	; 10
 6e6:	31 f4       	brne	.+12     	; 0x6f4 <__itoa_ncheck+0x12>
 6e8:	99 23       	and	r25, r25
 6ea:	22 f4       	brpl	.+8      	; 0x6f4 <__itoa_ncheck+0x12>
 6ec:	bd e2       	ldi	r27, 0x2D	; 45
 6ee:	90 95       	com	r25
 6f0:	81 95       	neg	r24
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__utoa_common>

000006f8 <__utoa_ncheck>:
 6f8:	bb 27       	eor	r27, r27

000006fa <__utoa_common>:
 6fa:	fb 01       	movw	r30, r22
 6fc:	55 27       	eor	r21, r21
 6fe:	aa 27       	eor	r26, r26
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	aa 1f       	adc	r26, r26
 706:	a4 17       	cp	r26, r20
 708:	10 f0       	brcs	.+4      	; 0x70e <__utoa_common+0x14>
 70a:	a4 1b       	sub	r26, r20
 70c:	83 95       	inc	r24
 70e:	50 51       	subi	r21, 0x10	; 16
 710:	b9 f7       	brne	.-18     	; 0x700 <__utoa_common+0x6>
 712:	a0 5d       	subi	r26, 0xD0	; 208
 714:	aa 33       	cpi	r26, 0x3A	; 58
 716:	08 f0       	brcs	.+2      	; 0x71a <__utoa_common+0x20>
 718:	a9 5d       	subi	r26, 0xD9	; 217
 71a:	a1 93       	st	Z+, r26
 71c:	00 97       	sbiw	r24, 0x00	; 0
 71e:	79 f7       	brne	.-34     	; 0x6fe <__utoa_common+0x4>
 720:	b1 11       	cpse	r27, r1
 722:	b1 93       	st	Z+, r27
 724:	11 92       	st	Z+, r1
 726:	cb 01       	movw	r24, r22
 728:	0c 94 96 03 	jmp	0x72c	; 0x72c <strrev>

0000072c <strrev>:
 72c:	dc 01       	movw	r26, r24
 72e:	fc 01       	movw	r30, r24
 730:	67 2f       	mov	r22, r23
 732:	71 91       	ld	r23, Z+
 734:	77 23       	and	r23, r23
 736:	e1 f7       	brne	.-8      	; 0x730 <strrev+0x4>
 738:	32 97       	sbiw	r30, 0x02	; 2
 73a:	04 c0       	rjmp	.+8      	; 0x744 <strrev+0x18>
 73c:	7c 91       	ld	r23, X
 73e:	6d 93       	st	X+, r22
 740:	70 83       	st	Z, r23
 742:	62 91       	ld	r22, -Z
 744:	ae 17       	cp	r26, r30
 746:	bf 07       	cpc	r27, r31
 748:	c8 f3       	brcs	.-14     	; 0x73c <strrev+0x10>
 74a:	08 95       	ret

0000074c <_exit>:
 74c:	f8 94       	cli

0000074e <__stop_program>:
 74e:	ff cf       	rjmp	.-2      	; 0x74e <__stop_program>
