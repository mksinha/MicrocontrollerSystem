
MicrocontrollerSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000007c4  00000838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002584  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be3  00000000  00000000  00002fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a8  00000000  00000000  00003ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003dc  00000000  00000000  00004350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000087c  00000000  00000000  0000472c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001315  00000000  00000000  00004fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  000062bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4d 03 	call	0x69a	; 0x69a <main>
  7a:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_ZN6Device9setStatusE4PORT3PINb>:

// functions

void Device::setStatus(PORT port, PIN pin, bool state)
{
	if (state == true)
  82:	44 23       	and	r20, r20
  84:	a9 f1       	breq	.+106    	; 0xf0 <_ZN6Device9setStatusE4PORT3PINb+0x6e>
	{
		if (port == IOPORTA)
  86:	81 11       	cpse	r24, r1
  88:	0b c0       	rjmp	.+22     	; 0xa0 <_ZN6Device9setStatusE4PORT3PINb+0x1e>
			PORTA |= 1 << pin;
  8a:	2b b3       	in	r18, 0x1b	; 27
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <_ZN6Device9setStatusE4PORT3PINb+0x14>
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	6a 95       	dec	r22
  98:	e2 f7       	brpl	.-8      	; 0x92 <_ZN6Device9setStatusE4PORT3PINb+0x10>
  9a:	82 2b       	or	r24, r18
  9c:	8b bb       	out	0x1b, r24	; 27
  9e:	08 95       	ret
		else if (port == IOPORTB)
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	59 f4       	brne	.+22     	; 0xba <_ZN6Device9setStatusE4PORT3PINb+0x38>
			PORTB |= 1 << pin;
  a4:	28 b3       	in	r18, 0x18	; 24
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <_ZN6Device9setStatusE4PORT3PINb+0x2e>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <_ZN6Device9setStatusE4PORT3PINb+0x2a>
  b4:	82 2b       	or	r24, r18
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	08 95       	ret
		else if (port == IOPORTC)
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	59 f4       	brne	.+22     	; 0xd4 <_ZN6Device9setStatusE4PORT3PINb+0x52>
			PORTC |= 1 << pin;
  be:	25 b3       	in	r18, 0x15	; 21
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <_ZN6Device9setStatusE4PORT3PINb+0x48>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <_ZN6Device9setStatusE4PORT3PINb+0x44>
  ce:	82 2b       	or	r24, r18
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	08 95       	ret
		else if (port == IOPORTD)
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	09 f0       	breq	.+2      	; 0xda <_ZN6Device9setStatusE4PORT3PINb+0x58>
  d8:	43 c0       	rjmp	.+134    	; 0x160 <_ZN6Device9setStatusE4PORT3PINb+0xde>
			PORTD |= 1 << pin;
  da:	22 b3       	in	r18, 0x12	; 18
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <_ZN6Device9setStatusE4PORT3PINb+0x64>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <_ZN6Device9setStatusE4PORT3PINb+0x60>
  ea:	82 2b       	or	r24, r18
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	08 95       	ret
	}
	else if (state == false)
	{
		if (port == IOPORTA)
  f0:	81 11       	cpse	r24, r1
  f2:	0d c0       	rjmp	.+26     	; 0x10e <_ZN6Device9setStatusE4PORT3PINb+0x8c>
			PORTA &= ~(1 << pin);
  f4:	9b b3       	in	r25, 0x1b	; 27
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	06 2e       	mov	r0, r22
  fc:	02 c0       	rjmp	.+4      	; 0x102 <_ZN6Device9setStatusE4PORT3PINb+0x80>
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <_ZN6Device9setStatusE4PORT3PINb+0x7c>
 106:	20 95       	com	r18
 108:	29 23       	and	r18, r25
 10a:	2b bb       	out	0x1b, r18	; 27
 10c:	1c c0       	rjmp	.+56     	; 0x146 <_ZN6Device9setStatusE4PORT3PINb+0xc4>
		if (port == IOPORTB)
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	61 f4       	brne	.+24     	; 0x12a <_ZN6Device9setStatusE4PORT3PINb+0xa8>
			PORTB &= ~(1 << pin);
 112:	28 b3       	in	r18, 0x18	; 24
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <_ZN6Device9setStatusE4PORT3PINb+0x9c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <_ZN6Device9setStatusE4PORT3PINb+0x98>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	88 bb       	out	0x18, r24	; 24
 128:	08 95       	ret
		if (port == IOPORTC)
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	61 f4       	brne	.+24     	; 0x146 <_ZN6Device9setStatusE4PORT3PINb+0xc4>
			PORTC &= ~(1 << pin);
 12e:	25 b3       	in	r18, 0x15	; 21
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <_ZN6Device9setStatusE4PORT3PINb+0xb8>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <_ZN6Device9setStatusE4PORT3PINb+0xb4>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	85 bb       	out	0x15, r24	; 21
 144:	08 95       	ret
		if (port == IOPORTD)
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	59 f4       	brne	.+22     	; 0x160 <_ZN6Device9setStatusE4PORT3PINb+0xde>
			PORTD &= ~(1 << pin);
 14a:	22 b3       	in	r18, 0x12	; 18
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <_ZN6Device9setStatusE4PORT3PINb+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <_ZN6Device9setStatusE4PORT3PINb+0xd0>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	82 bb       	out	0x12, r24	; 18
 160:	08 95       	ret

00000162 <_ZN6Device12setDirectionE4PORT3PINb>:
	}
}

void Device::setDirection(PORT port, PIN pin, bool state)
{
	if (state == true)
 162:	44 23       	and	r20, r20
 164:	a9 f1       	breq	.+106    	; 0x1d0 <_ZN6Device12setDirectionE4PORT3PINb+0x6e>
	{
		if (port == IOPORTA)
 166:	81 11       	cpse	r24, r1
 168:	0b c0       	rjmp	.+22     	; 0x180 <_ZN6Device12setDirectionE4PORT3PINb+0x1e>
			DDRA |= 1 << pin;
 16a:	2a b3       	in	r18, 0x1a	; 26
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <_ZN6Device12setDirectionE4PORT3PINb+0x14>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <_ZN6Device12setDirectionE4PORT3PINb+0x10>
 17a:	82 2b       	or	r24, r18
 17c:	8a bb       	out	0x1a, r24	; 26
 17e:	08 95       	ret
		else if (port == IOPORTB)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	59 f4       	brne	.+22     	; 0x19a <_ZN6Device12setDirectionE4PORT3PINb+0x38>
			DDRB |= 1 << pin;
 184:	27 b3       	in	r18, 0x17	; 23
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <_ZN6Device12setDirectionE4PORT3PINb+0x2e>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <_ZN6Device12setDirectionE4PORT3PINb+0x2a>
 194:	82 2b       	or	r24, r18
 196:	87 bb       	out	0x17, r24	; 23
 198:	08 95       	ret
		else if (port == IOPORTC)
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	59 f4       	brne	.+22     	; 0x1b4 <_ZN6Device12setDirectionE4PORT3PINb+0x52>
			DDRC |= 1 << pin;
 19e:	24 b3       	in	r18, 0x14	; 20
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <_ZN6Device12setDirectionE4PORT3PINb+0x48>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <_ZN6Device12setDirectionE4PORT3PINb+0x44>
 1ae:	82 2b       	or	r24, r18
 1b0:	84 bb       	out	0x14, r24	; 20
 1b2:	08 95       	ret
		else if (port == IOPORTD)
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	09 f0       	breq	.+2      	; 0x1ba <_ZN6Device12setDirectionE4PORT3PINb+0x58>
 1b8:	43 c0       	rjmp	.+134    	; 0x240 <_ZN6Device12setDirectionE4PORT3PINb+0xde>
			DDRD |= 1 << pin;
 1ba:	21 b3       	in	r18, 0x11	; 17
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <_ZN6Device12setDirectionE4PORT3PINb+0x64>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <_ZN6Device12setDirectionE4PORT3PINb+0x60>
 1ca:	82 2b       	or	r24, r18
 1cc:	81 bb       	out	0x11, r24	; 17
 1ce:	08 95       	ret
	}
	else if (state == false)
	{
		if (port == IOPORTA)
 1d0:	81 11       	cpse	r24, r1
 1d2:	0d c0       	rjmp	.+26     	; 0x1ee <_ZN6Device12setDirectionE4PORT3PINb+0x8c>
			DDRA &= ~(1 << pin);
 1d4:	9a b3       	in	r25, 0x1a	; 26
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	06 2e       	mov	r0, r22
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <_ZN6Device12setDirectionE4PORT3PINb+0x80>
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <_ZN6Device12setDirectionE4PORT3PINb+0x7c>
 1e6:	20 95       	com	r18
 1e8:	29 23       	and	r18, r25
 1ea:	2a bb       	out	0x1a, r18	; 26
 1ec:	1c c0       	rjmp	.+56     	; 0x226 <_ZN6Device12setDirectionE4PORT3PINb+0xc4>
		if (port == IOPORTB)
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	61 f4       	brne	.+24     	; 0x20a <_ZN6Device12setDirectionE4PORT3PINb+0xa8>
			DDRB &= ~(1 << pin);
 1f2:	27 b3       	in	r18, 0x17	; 23
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <_ZN6Device12setDirectionE4PORT3PINb+0x9c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <_ZN6Device12setDirectionE4PORT3PINb+0x98>
 202:	80 95       	com	r24
 204:	82 23       	and	r24, r18
 206:	87 bb       	out	0x17, r24	; 23
 208:	08 95       	ret
		if (port == IOPORTC)
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	61 f4       	brne	.+24     	; 0x226 <_ZN6Device12setDirectionE4PORT3PINb+0xc4>
			DDRC &= ~(1 << pin);
 20e:	24 b3       	in	r18, 0x14	; 20
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <_ZN6Device12setDirectionE4PORT3PINb+0xb8>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <_ZN6Device12setDirectionE4PORT3PINb+0xb4>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	84 bb       	out	0x14, r24	; 20
 224:	08 95       	ret
		if (port == IOPORTD)
 226:	83 30       	cpi	r24, 0x03	; 3
 228:	59 f4       	brne	.+22     	; 0x240 <_ZN6Device12setDirectionE4PORT3PINb+0xde>
			DDRD &= ~(1 << pin);
 22a:	21 b3       	in	r18, 0x11	; 17
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <_ZN6Device12setDirectionE4PORT3PINb+0xd4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <_ZN6Device12setDirectionE4PORT3PINb+0xd0>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	81 bb       	out	0x11, r24	; 17
 240:	08 95       	ret

00000242 <_ZN6Device9setStatusE4PORTi>:
	}
}

void Device::setStatus(PORT port, int state)
{
	if (port == IOPORTA)
 242:	81 11       	cpse	r24, r1
 244:	02 c0       	rjmp	.+4      	; 0x24a <_ZN6Device9setStatusE4PORTi+0x8>
		PORTA = state;
 246:	6b bb       	out	0x1b, r22	; 27
 248:	08 95       	ret
	else if (port == IOPORTB)
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	11 f4       	brne	.+4      	; 0x252 <_ZN6Device9setStatusE4PORTi+0x10>
		PORTB = state;
 24e:	68 bb       	out	0x18, r22	; 24
 250:	08 95       	ret
	else if (port == IOPORTC)
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	11 f4       	brne	.+4      	; 0x25a <_ZN6Device9setStatusE4PORTi+0x18>
		PORTC = state;
 256:	65 bb       	out	0x15, r22	; 21
 258:	08 95       	ret
	else if (port == IOPORTD)
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	09 f4       	brne	.+2      	; 0x260 <_ZN6Device9setStatusE4PORTi+0x1e>
		PORTD = state;
 25e:	62 bb       	out	0x12, r22	; 18
 260:	08 95       	ret

00000262 <_ZN6Device12setDirectionE4PORTi>:
}

void Device::setDirection(PORT port, int state)
{
	if (port == IOPORTA)
 262:	81 11       	cpse	r24, r1
 264:	02 c0       	rjmp	.+4      	; 0x26a <_ZN6Device12setDirectionE4PORTi+0x8>
		DDRA = state;
 266:	6a bb       	out	0x1a, r22	; 26
 268:	08 95       	ret
	else if (port == IOPORTB)
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	11 f4       	brne	.+4      	; 0x272 <_ZN6Device12setDirectionE4PORTi+0x10>
		DDRB = state;
 26e:	67 bb       	out	0x17, r22	; 23
 270:	08 95       	ret
	else if (port == IOPORTC)
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	11 f4       	brne	.+4      	; 0x27a <_ZN6Device12setDirectionE4PORTi+0x18>
		DDRC = state;
 276:	64 bb       	out	0x14, r22	; 20
 278:	08 95       	ret
	else if (port == IOPORTD)
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	09 f4       	brne	.+2      	; 0x280 <_ZN6Device12setDirectionE4PORTi+0x1e>
		DDRD = state;
 27e:	61 bb       	out	0x11, r22	; 17
 280:	08 95       	ret

00000282 <_ZN6Device9getStatusE4PORT3PIN>:
}

bool Device::getStatus(PORT port, PIN pin)
{
	if (port == IOPORTA)
 282:	81 11       	cpse	r24, r1
 284:	09 c0       	rjmp	.+18     	; 0x298 <_ZN6Device9getStatusE4PORT3PIN+0x16>
		return bit_is_set(PINA, pin);
 286:	89 b3       	in	r24, 0x19	; 25
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <_ZN6Device9getStatusE4PORT3PIN+0xe>
 28c:	95 95       	asr	r25
 28e:	87 95       	ror	r24
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <_ZN6Device9getStatusE4PORT3PIN+0xa>
 294:	81 70       	andi	r24, 0x01	; 1
 296:	08 95       	ret
	else if (port == IOPORTB)
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	49 f4       	brne	.+18     	; 0x2ae <_ZN6Device9getStatusE4PORT3PIN+0x2c>
		return bit_is_set(PINB, pin);
 29c:	86 b3       	in	r24, 0x16	; 22
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <_ZN6Device9getStatusE4PORT3PIN+0x24>
 2a2:	95 95       	asr	r25
 2a4:	87 95       	ror	r24
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <_ZN6Device9getStatusE4PORT3PIN+0x20>
 2aa:	81 70       	andi	r24, 0x01	; 1
 2ac:	08 95       	ret
	else if (port == IOPORTC)
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	49 f4       	brne	.+18     	; 0x2c4 <_ZN6Device9getStatusE4PORT3PIN+0x42>
		return bit_is_set(PINC, pin);
 2b2:	83 b3       	in	r24, 0x13	; 19
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <_ZN6Device9getStatusE4PORT3PIN+0x3a>
 2b8:	95 95       	asr	r25
 2ba:	87 95       	ror	r24
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <_ZN6Device9getStatusE4PORT3PIN+0x36>
 2c0:	81 70       	andi	r24, 0x01	; 1
 2c2:	08 95       	ret
	else if (port == IOPORTD)
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	49 f4       	brne	.+18     	; 0x2da <_ZN6Device9getStatusE4PORT3PIN+0x58>
		return bit_is_set(PIND, pin);
 2c8:	80 b3       	in	r24, 0x10	; 16
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <_ZN6Device9getStatusE4PORT3PIN+0x50>
 2ce:	95 95       	asr	r25
 2d0:	87 95       	ror	r24
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <_ZN6Device9getStatusE4PORT3PIN+0x4c>
 2d6:	81 70       	andi	r24, 0x01	; 1
 2d8:	08 95       	ret
 2da:	08 95       	ret

000002dc <_ZN3LED10initializeEv>:
		off();
	return status;
}

void LED::initialize()
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	ec 01       	movw	r28, r24
	setDirection(port, pin, true);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	6c 81       	ldd	r22, Y+4	; 0x04
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN6Device12setDirectionE4PORT3PINb>
	setStatus(port, pin, false);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	6c 81       	ldd	r22, Y+4	; 0x04
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	0e 94 41 00 	call	0x82	; 0x82 <_ZN6Device9setStatusE4PORT3PINb>
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <_ZN3LEDC1E4PORT3PIN>:


#include "LED.h"

// default constructor
LED::LED(PORT port, PIN pin)
 2fc:	2c e6       	ldi	r18, 0x6C	; 108
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	fc 01       	movw	r30, r24
 302:	31 83       	std	Z+1, r19	; 0x01
 304:	20 83       	st	Z, r18
{
	this->port = port;
 306:	63 83       	std	Z+3, r22	; 0x03
	this->pin = pin;
 308:	44 83       	std	Z+4, r20	; 0x04
	this->status = false;
 30a:	12 82       	std	Z+2, r1	; 0x02
	initialize();
 30c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN3LED10initializeEv>
 310:	08 95       	ret

00000312 <_ZN3LED2onEv>:
LED::~LED()
{
} //~LED

void LED::on()
{
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ec 01       	movw	r28, r24
	setStatus(port, pin, true);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	6c 81       	ldd	r22, Y+4	; 0x04
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	0e 94 41 00 	call	0x82	; 0x82 <_ZN6Device9setStatusE4PORT3PINb>
	status = true;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	8a 83       	std	Y+2, r24	; 0x02
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <_ZN3LED3offEv>:

void LED::off()
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ec 01       	movw	r28, r24
	setStatus(port, pin, false);
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	6c 81       	ldd	r22, Y+4	; 0x04
 336:	8b 81       	ldd	r24, Y+3	; 0x03
 338:	0e 94 41 00 	call	0x82	; 0x82 <_ZN6Device9setStatusE4PORT3PINb>
	status = false;
 33c:	1a 82       	std	Y+2, r1	; 0x02
}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <_ZN3LED6toggleEv>:

bool LED::toggle()
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	ec 01       	movw	r28, r24
	if (status == false)
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	81 11       	cpse	r24, r1
 34e:	04 c0       	rjmp	.+8      	; 0x358 <_ZN3LED6toggleEv+0x14>
		on();
 350:	ce 01       	movw	r24, r28
 352:	0e 94 89 01 	call	0x312	; 0x312 <_ZN3LED2onEv>
 356:	03 c0       	rjmp	.+6      	; 0x35e <_ZN3LED6toggleEv+0x1a>
	else if(status == true)
		off();
 358:	ce 01       	movw	r24, r28
 35a:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN3LED3offEv>
	return status;
}
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <_ZN15ParallelTextLCD13action_enableEv>:
		action_enable();
	setDirection(dataPort, 0xFF);
}

void ParallelTextLCD::action_enable(void)
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	ec 01       	movw	r28, r24
	setStatus(controlPort, pinEN, true);
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	6c 81       	ldd	r22, Y+4	; 0x04
 370:	8b 81       	ldd	r24, Y+3	; 0x03
 372:	0e 94 41 00 	call	0x82	; 0x82 <_ZN6Device9setStatusE4PORT3PINb>
	asm volatile ("nop");
 376:	00 00       	nop
	asm volatile ("nop");
 378:	00 00       	nop
	setStatus(controlPort, pinEN, false);
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	6c 81       	ldd	r22, Y+4	; 0x04
 37e:	8b 81       	ldd	r24, Y+3	; 0x03
 380:	0e 94 41 00 	call	0x82	; 0x82 <_ZN6Device9setStatusE4PORT3PINb>
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <_ZN15ParallelTextLCD9wait_busyEv>:
	action_enable();
	setStatus(dataPort, 0x00);
}

void ParallelTextLCD::wait_busy(void)
{
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	ec 01       	movw	r28, r24
	setDirection(dataPort, 0x00);
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	0e 94 31 01 	call	0x262	; 0x262 <_ZN6Device12setDirectionE4PORTi>
	setStatus(controlPort, pinRW, true);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	6d 81       	ldd	r22, Y+5	; 0x05
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	0e 94 41 00 	call	0x82	; 0x82 <_ZN6Device9setStatusE4PORT3PINb>
	setStatus(controlPort, pinRS, false);
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	6e 81       	ldd	r22, Y+6	; 0x06
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	0e 94 41 00 	call	0x82	; 0x82 <_ZN6Device9setStatusE4PORT3PINb>
	while (getStatus(dataPort, IOPIN7) == true)
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <_ZN15ParallelTextLCD9wait_busyEv+0x2c>
		action_enable();
 3b0:	ce 01       	movw	r24, r28
 3b2:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN15ParallelTextLCD13action_enableEv>
void ParallelTextLCD::wait_busy(void)
{
	setDirection(dataPort, 0x00);
	setStatus(controlPort, pinRW, true);
	setStatus(controlPort, pinRS, false);
	while (getStatus(dataPort, IOPIN7) == true)
 3b6:	67 e0       	ldi	r22, 0x07	; 7
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	0e 94 41 01 	call	0x282	; 0x282 <_ZN6Device9getStatusE4PORT3PIN>
 3be:	81 11       	cpse	r24, r1
 3c0:	f7 cf       	rjmp	.-18     	; 0x3b0 <_ZN15ParallelTextLCD9wait_busyEv+0x26>
		action_enable();
	setDirection(dataPort, 0xFF);
 3c2:	6f ef       	ldi	r22, 0xFF	; 255
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	8a 81       	ldd	r24, Y+2	; 0x02
 3c8:	0e 94 31 01 	call	0x262	; 0x262 <_ZN6Device12setDirectionE4PORTi>
}
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <_ZN15ParallelTextLCD7commandEh>:
		command(0b00001111);
	_delay_us(50);
}

void ParallelTextLCD::command(unsigned char cmd)
{
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	ec 01       	movw	r28, r24
 3da:	16 2f       	mov	r17, r22
	wait_busy();
 3dc:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN15ParallelTextLCD9wait_busyEv>
	setStatus(dataPort, cmd);
 3e0:	61 2f       	mov	r22, r17
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	8a 81       	ldd	r24, Y+2	; 0x02
 3e6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN6Device9setStatusE4PORTi>
	setStatus(controlPort, pinRW, false);
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	6d 81       	ldd	r22, Y+5	; 0x05
 3ee:	8b 81       	ldd	r24, Y+3	; 0x03
 3f0:	0e 94 41 00 	call	0x82	; 0x82 <_ZN6Device9setStatusE4PORT3PINb>
	setStatus(controlPort, pinRS, false);
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	6e 81       	ldd	r22, Y+6	; 0x06
 3f8:	8b 81       	ldd	r24, Y+3	; 0x03
 3fa:	0e 94 41 00 	call	0x82	; 0x82 <_ZN6Device9setStatusE4PORT3PINb>
	action_enable();
 3fe:	ce 01       	movw	r24, r28
 400:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN15ParallelTextLCD13action_enableEv>
	setStatus(dataPort, 0x00);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	8a 81       	ldd	r24, Y+2	; 0x02
 40a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN6Device9setStatusE4PORTi>
}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	08 95       	ret

00000416 <_ZN15ParallelTextLCD10initializeEv>:
	setStatus(controlPort, pinRW, false);
	setStatus(controlPort, pinEN, false);
}

void ParallelTextLCD::initialize()
{
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	ec 01       	movw	r28, r24
	setDirection(controlPort, pinRS, true);
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	6e 81       	ldd	r22, Y+6	; 0x06
 420:	8b 81       	ldd	r24, Y+3	; 0x03
 422:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN6Device12setDirectionE4PORT3PINb>
	setDirection(controlPort, pinRW, true);
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	6d 81       	ldd	r22, Y+5	; 0x05
 42a:	8b 81       	ldd	r24, Y+3	; 0x03
 42c:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN6Device12setDirectionE4PORT3PINb>
	setDirection(controlPort, pinEN, true);
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	6c 81       	ldd	r22, Y+4	; 0x04
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN6Device12setDirectionE4PORT3PINb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43a:	85 ea       	ldi	r24, 0xA5	; 165
 43c:	9e e0       	ldi	r25, 0x0E	; 14
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <_ZN15ParallelTextLCD10initializeEv+0x28>
 442:	00 c0       	rjmp	.+0      	; 0x444 <_ZN15ParallelTextLCD10initializeEv+0x2e>
 444:	00 00       	nop
	_delay_ms(15);
	command(0x01); // Clear Screen
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	ce 01       	movw	r24, r28
 44a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN15ParallelTextLCD7commandEh>
 44e:	83 ef       	ldi	r24, 0xF3	; 243
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <_ZN15ParallelTextLCD10initializeEv+0x3c>
 456:	00 c0       	rjmp	.+0      	; 0x458 <_ZN15ParallelTextLCD10initializeEv+0x42>
 458:	00 00       	nop
	_delay_ms(2);
	command(0x38); // Set up LCD 8-bit mode
 45a:	68 e3       	ldi	r22, 0x38	; 56
 45c:	ce 01       	movw	r24, r28
 45e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN15ParallelTextLCD7commandEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 462:	90 e1       	ldi	r25, 0x10	; 16
 464:	9a 95       	dec	r25
 466:	f1 f7       	brne	.-4      	; 0x464 <_ZN15ParallelTextLCD10initializeEv+0x4e>
 468:	00 c0       	rjmp	.+0      	; 0x46a <_ZN15ParallelTextLCD10initializeEv+0x54>
	_delay_us(50);
	command(0b00001100); // Bit 3: Use function |2: Show Display |1: Show Cursor |0: Blinking Cursor
 46a:	6c e0       	ldi	r22, 0x0C	; 12
 46c:	ce 01       	movw	r24, r28
 46e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN15ParallelTextLCD7commandEh>
 472:	80 e1       	ldi	r24, 0x10	; 16
 474:	8a 95       	dec	r24
 476:	f1 f7       	brne	.-4      	; 0x474 <_ZN15ParallelTextLCD10initializeEv+0x5e>
 478:	00 c0       	rjmp	.+0      	; 0x47a <_ZN15ParallelTextLCD10initializeEv+0x64>
	_delay_us(50);
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <_ZN15ParallelTextLCDC1E4PORTS0_3PINS1_S1_>:
#include "ParallelTextLCD.h"
#include <stdlib.h>
#include <util/delay.h>

// default constructor
ParallelTextLCD::ParallelTextLCD(PORT portData, PORT portControl, PIN pinRS, PIN pinRW, PIN pinEN)
 480:	ef 92       	push	r14
 482:	0f 93       	push	r16
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	ec 01       	movw	r28, r24
 48a:	84 e7       	ldi	r24, 0x74	; 116
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	99 83       	std	Y+1, r25	; 0x01
 490:	88 83       	st	Y, r24
 492:	88 e0       	ldi	r24, 0x08	; 8
 494:	e0 e6       	ldi	r30, 0x60	; 96
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	de 01       	movw	r26, r28
 49a:	17 96       	adiw	r26, 0x07	; 7
 49c:	01 90       	ld	r0, Z+
 49e:	0d 92       	st	X+, r0
 4a0:	8a 95       	dec	r24
 4a2:	e1 f7       	brne	.-8      	; 0x49c <_ZN15ParallelTextLCDC1E4PORTS0_3PINS1_S1_+0x1c>
{
	this->dataPort = portData;
 4a4:	6a 83       	std	Y+2, r22	; 0x02
	this->controlPort = portControl;
 4a6:	4b 83       	std	Y+3, r20	; 0x03
	this->pinRS = pinRS;
 4a8:	2e 83       	std	Y+6, r18	; 0x06
	this->pinRW = pinRW;
 4aa:	0d 83       	std	Y+5, r16	; 0x05
	this->pinEN = pinEN;
 4ac:	ec 82       	std	Y+4, r14	; 0x04
	initialize();
 4ae:	ce 01       	movw	r24, r28
 4b0:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN15ParallelTextLCD10initializeEv>
} 
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	0f 91       	pop	r16
 4ba:	ef 90       	pop	r14
 4bc:	08 95       	ret

000004be <_ZN15ParallelTextLCD8positionEii>:
	while(*str > 0)
		character(*str++);
}

void ParallelTextLCD::position(int x, int y)
{
 4be:	60 58       	subi	r22, 0x80	; 128
	command(0x80 + this->rowPositions[y] + x);
 4c0:	fa 01       	movw	r30, r20
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	e8 0f       	add	r30, r24
 4c8:	f9 1f       	adc	r31, r25
 4ca:	27 81       	ldd	r18, Z+7	; 0x07
 4cc:	62 0f       	add	r22, r18
 4ce:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN15ParallelTextLCD7commandEh>
 4d2:	08 95       	ret

000004d4 <_ZN15ParallelTextLCD9characterEh>:
	action_enable();
	setStatus(dataPort, 0x00);
}

void ParallelTextLCD::character(unsigned char chr)
{
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	ec 01       	movw	r28, r24
 4dc:	16 2f       	mov	r17, r22
	wait_busy();
 4de:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN15ParallelTextLCD9wait_busyEv>
	setStatus(dataPort, chr);
 4e2:	61 2f       	mov	r22, r17
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN6Device9setStatusE4PORTi>
	setStatus(controlPort, pinRW, false);
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	6d 81       	ldd	r22, Y+5	; 0x05
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	0e 94 41 00 	call	0x82	; 0x82 <_ZN6Device9setStatusE4PORT3PINb>
	setStatus(controlPort, pinRS, true);
 4f6:	41 e0       	ldi	r20, 0x01	; 1
 4f8:	6e 81       	ldd	r22, Y+6	; 0x06
 4fa:	8b 81       	ldd	r24, Y+3	; 0x03
 4fc:	0e 94 41 00 	call	0x82	; 0x82 <_ZN6Device9setStatusE4PORT3PINb>
	action_enable();
 500:	ce 01       	movw	r24, r28
 502:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN15ParallelTextLCD13action_enableEv>
	setStatus(dataPort, 0x00);
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	8a 81       	ldd	r24, Y+2	; 0x02
 50c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN6Device9setStatusE4PORTi>
}
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	08 95       	ret

00000518 <_ZN15ParallelTextLCD6stringEPc>:
	position(x, y);
	string(str);
}

void ParallelTextLCD::string(char* str)
{
 518:	0f 93       	push	r16
 51a:	1f 93       	push	r17
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	eb 01       	movw	r28, r22
	while(*str > 0)
 522:	68 81       	ld	r22, Y
 524:	66 23       	and	r22, r22
 526:	41 f0       	breq	.+16     	; 0x538 <_ZN15ParallelTextLCD6stringEPc+0x20>
 528:	8c 01       	movw	r16, r24
 52a:	21 96       	adiw	r28, 0x01	; 1
		character(*str++);
 52c:	c8 01       	movw	r24, r16
 52e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN15ParallelTextLCD9characterEh>
	string(str);
}

void ParallelTextLCD::string(char* str)
{
	while(*str > 0)
 532:	69 91       	ld	r22, Y+
 534:	61 11       	cpse	r22, r1
 536:	fa cf       	rjmp	.-12     	; 0x52c <_ZN15ParallelTextLCD6stringEPc+0x14>
		character(*str++);
}
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	1f 91       	pop	r17
 53e:	0f 91       	pop	r16
 540:	08 95       	ret

00000542 <_ZN15ParallelTextLCD6stringEiiPc>:
	for (int i = 0; i < digits; i++) string(" ");
	string(str);
}

void ParallelTextLCD::string(int x, int y, char* str)
{
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	ec 01       	movw	r28, r24
 54c:	89 01       	movw	r16, r18
	position(x, y);
 54e:	0e 94 5f 02 	call	0x4be	; 0x4be <_ZN15ParallelTextLCD8positionEii>
	string(str);
 552:	b8 01       	movw	r22, r16
 554:	ce 01       	movw	r24, r28
 556:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN15ParallelTextLCD6stringEPc>
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	08 95       	ret

00000564 <_ZN15ParallelTextLCD7integerEiiii>:
	command(0b00001100); // Bit 3: Use function |2: Show Display |1: Show Cursor |0: Blinking Cursor
	_delay_us(50);
}

void ParallelTextLCD::integer(int x, int y, int num, int digits)
{
 564:	4f 92       	push	r4
 566:	5f 92       	push	r5
 568:	6f 92       	push	r6
 56a:	7f 92       	push	r7
 56c:	8f 92       	push	r8
 56e:	9f 92       	push	r9
 570:	af 92       	push	r10
 572:	bf 92       	push	r11
 574:	cf 92       	push	r12
 576:	df 92       	push	r13
 578:	ef 92       	push	r14
 57a:	ff 92       	push	r15
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	cd b7       	in	r28, 0x3d	; 61
 586:	de b7       	in	r29, 0x3e	; 62
 588:	6c 01       	movw	r12, r24
 58a:	5b 01       	movw	r10, r22
 58c:	4a 01       	movw	r8, r20
 58e:	c9 01       	movw	r24, r18
	char str[digits];
	itoa(num, str, 10);
	for (int i = 0; i < digits; i++) string(" ");
	string(x, y, str);
}
 590:	6d b6       	in	r6, 0x3d	; 61
 592:	7e b6       	in	r7, 0x3e	; 62
	_delay_us(50);
}

void ParallelTextLCD::integer(int x, int y, int num, int digits)
{
	char str[digits];
 594:	2d b7       	in	r18, 0x3d	; 61
 596:	3e b7       	in	r19, 0x3e	; 62
 598:	20 1b       	sub	r18, r16
 59a:	31 0b       	sbc	r19, r17
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	f8 94       	cli
 5a0:	3e bf       	out	0x3e, r19	; 62
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	2d bf       	out	0x3d, r18	; 61
 5a6:	2f 5f       	subi	r18, 0xFF	; 255
 5a8:	3f 4f       	sbci	r19, 0xFF	; 255
 5aa:	29 01       	movw	r4, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5ac:	4a e0       	ldi	r20, 0x0A	; 10
 5ae:	b9 01       	movw	r22, r18
 5b0:	0e 94 ab 03 	call	0x756	; 0x756 <__itoa_ncheck>
	itoa(num, str, 10);
	for (int i = 0; i < digits; i++) string(" ");
 5b4:	10 16       	cp	r1, r16
 5b6:	11 06       	cpc	r1, r17
 5b8:	6c f4       	brge	.+26     	; 0x5d4 <_ZN15ParallelTextLCD7integerEiiii+0x70>
 5ba:	e1 2c       	mov	r14, r1
 5bc:	f1 2c       	mov	r15, r1
 5be:	6e e6       	ldi	r22, 0x6E	; 110
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	c6 01       	movw	r24, r12
 5c4:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN15ParallelTextLCD6stringEPc>
 5c8:	3f ef       	ldi	r19, 0xFF	; 255
 5ca:	e3 1a       	sub	r14, r19
 5cc:	f3 0a       	sbc	r15, r19
 5ce:	e0 16       	cp	r14, r16
 5d0:	f1 06       	cpc	r15, r17
 5d2:	a9 f7       	brne	.-22     	; 0x5be <_ZN15ParallelTextLCD7integerEiiii+0x5a>
	string(x, y, str);
 5d4:	92 01       	movw	r18, r4
 5d6:	a4 01       	movw	r20, r8
 5d8:	b5 01       	movw	r22, r10
 5da:	c6 01       	movw	r24, r12
 5dc:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN15ParallelTextLCD6stringEiiPc>
}
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	7e be       	out	0x3e, r7	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	6d be       	out	0x3d, r6	; 61
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	0f 91       	pop	r16
 5f2:	ff 90       	pop	r15
 5f4:	ef 90       	pop	r14
 5f6:	df 90       	pop	r13
 5f8:	cf 90       	pop	r12
 5fa:	bf 90       	pop	r11
 5fc:	af 90       	pop	r10
 5fe:	9f 90       	pop	r9
 600:	8f 90       	pop	r8
 602:	7f 90       	pop	r7
 604:	6f 90       	pop	r6
 606:	5f 90       	pop	r5
 608:	4f 90       	pop	r4
 60a:	08 95       	ret

0000060c <_ZN16PushButtonSwitch10initializeEv>:
		return status;
	}
}

void PushButtonSwitch::initialize()
{
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	ec 01       	movw	r28, r24
	setDirection(port, pin, false);
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	6e 81       	ldd	r22, Y+6	; 0x06
 616:	8d 81       	ldd	r24, Y+5	; 0x05
 618:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN6Device12setDirectionE4PORT3PINb>
	setStatus(port, pin, pullState);
 61c:	48 85       	ldd	r20, Y+8	; 0x08
 61e:	6e 81       	ldd	r22, Y+6	; 0x06
 620:	8d 81       	ldd	r24, Y+5	; 0x05
 622:	0e 94 41 00 	call	0x82	; 0x82 <_ZN6Device9setStatusE4PORT3PINb>
	this->status = false;
 626:	1a 82       	std	Y+2, r1	; 0x02
}
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret

0000062e <_ZN16PushButtonSwitchC1E4PORT3PINbbi>:


#include "PushButtonSwitch.h"

// default constructor
PushButtonSwitch::PushButtonSwitch(PORT port, PIN pin, bool no_nc, bool pullState, int debounceLimit)
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	fc 01       	movw	r30, r24
 636:	8a e7       	ldi	r24, 0x7A	; 122
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	91 83       	std	Z+1, r25	; 0x01
 63c:	80 83       	st	Z, r24
{
	this->port = port;
 63e:	65 83       	std	Z+5, r22	; 0x05
	this->pin = pin;
 640:	46 83       	std	Z+6, r20	; 0x06
	this->no_nc = no_nc;
 642:	27 83       	std	Z+7, r18	; 0x07
	this->pullState = pullState;
 644:	00 87       	std	Z+8, r16	; 0x08
	this->debounceLimit = debounceLimit;
 646:	f4 82       	std	Z+4, r15	; 0x04
 648:	e3 82       	std	Z+3, r14	; 0x03
	this->initialize();
 64a:	cf 01       	movw	r24, r30
 64c:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN16PushButtonSwitch10initializeEv>
} //PushButtonSwitch
 650:	0f 91       	pop	r16
 652:	ff 90       	pop	r15
 654:	ef 90       	pop	r14
 656:	08 95       	ret

00000658 <_ZN16PushButtonSwitch10checkStateEv>:
	setStatus(port, pin, pullState);
	this->status = false;
}

bool PushButtonSwitch::checkState()
{
 658:	fc 01       	movw	r30, r24
	if (pullState == true)
 65a:	80 85       	ldd	r24, Z+8	; 0x08
 65c:	88 23       	and	r24, r24
 65e:	39 f0       	breq	.+14     	; 0x66e <_ZN16PushButtonSwitch10checkStateEv+0x16>
		return !getStatus(port, pin);
 660:	66 81       	ldd	r22, Z+6	; 0x06
 662:	85 81       	ldd	r24, Z+5	; 0x05
 664:	0e 94 41 01 	call	0x282	; 0x282 <_ZN6Device9getStatusE4PORT3PIN>
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	89 27       	eor	r24, r25
 66c:	08 95       	ret
	else
		return getStatus(port, pin);
 66e:	66 81       	ldd	r22, Z+6	; 0x06
 670:	85 81       	ldd	r24, Z+5	; 0x05
 672:	0e 94 41 01 	call	0x282	; 0x282 <_ZN6Device9getStatusE4PORT3PIN>
 676:	08 95       	ret

00000678 <_ZN16PushButtonSwitch5stateEv>:
PushButtonSwitch::~PushButtonSwitch()
{
} //~PushButtonSwitch

bool PushButtonSwitch::state()
{
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	ec 01       	movw	r28, r24
	if(checkState() != status)
 67e:	0e 94 2c 03 	call	0x658	; 0x658 <_ZN16PushButtonSwitch10checkStateEv>
 682:	9a 81       	ldd	r25, Y+2	; 0x02
 684:	89 17       	cp	r24, r25
 686:	29 f0       	breq	.+10     	; 0x692 <_ZN16PushButtonSwitch5stateEv+0x1a>
	{
		status = checkState();
 688:	ce 01       	movw	r24, r28
 68a:	0e 94 2c 03 	call	0x658	; 0x658 <_ZN16PushButtonSwitch10checkStateEv>
 68e:	98 2f       	mov	r25, r24
 690:	8a 83       	std	Y+2, r24	; 0x02
	}
	else
	{
		return status;
	}
}
 692:	89 2f       	mov	r24, r25
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	08 95       	ret

0000069a <main>:
#include "drivers/LED.h"
#include "drivers/ParallelTextLCD.h"
#include "drivers/PushButtonSwitch.h"

int main(void)
{
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
 6a2:	6d 97       	sbiw	r28, 0x1d	; 29
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	f8 94       	cli
 6a8:	de bf       	out	0x3e, r29	; 62
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	cd bf       	out	0x3d, r28	; 61
	LED led(IOPORTC, IOPIN6);
 6ae:	46 e0       	ldi	r20, 0x06	; 6
 6b0:	62 e0       	ldi	r22, 0x02	; 2
 6b2:	ce 01       	movw	r24, r28
 6b4:	49 96       	adiw	r24, 0x19	; 25
 6b6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN3LEDC1E4PORT3PIN>
	PushButtonSwitch pbswitch(IOPORTA, IOPIN0, true, true, 100);
 6ba:	0f 2e       	mov	r0, r31
 6bc:	f4 e6       	ldi	r31, 0x64	; 100
 6be:	ef 2e       	mov	r14, r31
 6c0:	f1 2c       	mov	r15, r1
 6c2:	f0 2d       	mov	r31, r0
 6c4:	01 e0       	ldi	r16, 0x01	; 1
 6c6:	21 e0       	ldi	r18, 0x01	; 1
 6c8:	40 e0       	ldi	r20, 0x00	; 0
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	ce 01       	movw	r24, r28
 6ce:	40 96       	adiw	r24, 0x10	; 16
 6d0:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN16PushButtonSwitchC1E4PORT3PINbbi>
	ParallelTextLCD lcd(IOPORTB, IOPORTD, IOPIN2, IOPIN7, IOPIN5);
 6d4:	0f 2e       	mov	r0, r31
 6d6:	f5 e0       	ldi	r31, 0x05	; 5
 6d8:	ef 2e       	mov	r14, r31
 6da:	f0 2d       	mov	r31, r0
 6dc:	07 e0       	ldi	r16, 0x07	; 7
 6de:	22 e0       	ldi	r18, 0x02	; 2
 6e0:	43 e0       	ldi	r20, 0x03	; 3
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	ce 01       	movw	r24, r28
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	0e 94 40 02 	call	0x480	; 0x480 <_ZN15ParallelTextLCDC1E4PORTS0_3PINS1_S1_>
	lcd.string(0, 0, "Hello Debugger");
 6ec:	2c e7       	ldi	r18, 0x7C	; 124
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	40 e0       	ldi	r20, 0x00	; 0
 6f2:	50 e0       	ldi	r21, 0x00	; 0
 6f4:	60 e0       	ldi	r22, 0x00	; 0
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	ce 01       	movw	r24, r28
 6fa:	01 96       	adiw	r24, 0x01	; 1
 6fc:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN15ParallelTextLCD6stringEiiPc>
	lcd.integer(6, 1, 1309, 5);
 700:	05 e0       	ldi	r16, 0x05	; 5
 702:	10 e0       	ldi	r17, 0x00	; 0
 704:	2d e1       	ldi	r18, 0x1D	; 29
 706:	35 e0       	ldi	r19, 0x05	; 5
 708:	41 e0       	ldi	r20, 0x01	; 1
 70a:	50 e0       	ldi	r21, 0x00	; 0
 70c:	66 e0       	ldi	r22, 0x06	; 6
 70e:	70 e0       	ldi	r23, 0x00	; 0
 710:	ce 01       	movw	r24, r28
 712:	01 96       	adiw	r24, 0x01	; 1
 714:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN15ParallelTextLCD7integerEiiii>
	led.on();
 718:	ce 01       	movw	r24, r28
 71a:	49 96       	adiw	r24, 0x19	; 25
 71c:	0e 94 89 01 	call	0x312	; 0x312 <_ZN3LED2onEv>
	while (1)
    {
		led.toggle();
 720:	ce 01       	movw	r24, r28
 722:	49 96       	adiw	r24, 0x19	; 25
 724:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN3LED6toggleEv>
		if (pbswitch.state()) _delay_ms(100);
 728:	ce 01       	movw	r24, r28
 72a:	40 96       	adiw	r24, 0x10	; 16
 72c:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN16PushButtonSwitch5stateEv>
 730:	88 23       	and	r24, r24
 732:	39 f0       	breq	.+14     	; 0x742 <main+0xa8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 734:	87 ea       	ldi	r24, 0xA7	; 167
 736:	91 e6       	ldi	r25, 0x61	; 97
 738:	01 97       	sbiw	r24, 0x01	; 1
 73a:	f1 f7       	brne	.-4      	; 0x738 <main+0x9e>
 73c:	00 c0       	rjmp	.+0      	; 0x73e <main+0xa4>
 73e:	00 00       	nop
 740:	ef cf       	rjmp	.-34     	; 0x720 <main+0x86>
 742:	9f e3       	ldi	r25, 0x3F	; 63
 744:	2d e0       	ldi	r18, 0x0D	; 13
 746:	83 e0       	ldi	r24, 0x03	; 3
 748:	91 50       	subi	r25, 0x01	; 1
 74a:	20 40       	sbci	r18, 0x00	; 0
 74c:	80 40       	sbci	r24, 0x00	; 0
 74e:	e1 f7       	brne	.-8      	; 0x748 <main+0xae>
 750:	00 c0       	rjmp	.+0      	; 0x752 <main+0xb8>
 752:	00 00       	nop
 754:	e5 cf       	rjmp	.-54     	; 0x720 <main+0x86>

00000756 <__itoa_ncheck>:
 756:	bb 27       	eor	r27, r27
 758:	4a 30       	cpi	r20, 0x0A	; 10
 75a:	31 f4       	brne	.+12     	; 0x768 <__itoa_ncheck+0x12>
 75c:	99 23       	and	r25, r25
 75e:	22 f4       	brpl	.+8      	; 0x768 <__itoa_ncheck+0x12>
 760:	bd e2       	ldi	r27, 0x2D	; 45
 762:	90 95       	com	r25
 764:	81 95       	neg	r24
 766:	9f 4f       	sbci	r25, 0xFF	; 255
 768:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__utoa_common>

0000076c <__utoa_ncheck>:
 76c:	bb 27       	eor	r27, r27

0000076e <__utoa_common>:
 76e:	fb 01       	movw	r30, r22
 770:	55 27       	eor	r21, r21
 772:	aa 27       	eor	r26, r26
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	aa 1f       	adc	r26, r26
 77a:	a4 17       	cp	r26, r20
 77c:	10 f0       	brcs	.+4      	; 0x782 <__utoa_common+0x14>
 77e:	a4 1b       	sub	r26, r20
 780:	83 95       	inc	r24
 782:	50 51       	subi	r21, 0x10	; 16
 784:	b9 f7       	brne	.-18     	; 0x774 <__utoa_common+0x6>
 786:	a0 5d       	subi	r26, 0xD0	; 208
 788:	aa 33       	cpi	r26, 0x3A	; 58
 78a:	08 f0       	brcs	.+2      	; 0x78e <__utoa_common+0x20>
 78c:	a9 5d       	subi	r26, 0xD9	; 217
 78e:	a1 93       	st	Z+, r26
 790:	00 97       	sbiw	r24, 0x00	; 0
 792:	79 f7       	brne	.-34     	; 0x772 <__utoa_common+0x4>
 794:	b1 11       	cpse	r27, r1
 796:	b1 93       	st	Z+, r27
 798:	11 92       	st	Z+, r1
 79a:	cb 01       	movw	r24, r22
 79c:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <strrev>

000007a0 <strrev>:
 7a0:	dc 01       	movw	r26, r24
 7a2:	fc 01       	movw	r30, r24
 7a4:	67 2f       	mov	r22, r23
 7a6:	71 91       	ld	r23, Z+
 7a8:	77 23       	and	r23, r23
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <strrev+0x4>
 7ac:	32 97       	sbiw	r30, 0x02	; 2
 7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <strrev+0x18>
 7b0:	7c 91       	ld	r23, X
 7b2:	6d 93       	st	X+, r22
 7b4:	70 83       	st	Z, r23
 7b6:	62 91       	ld	r22, -Z
 7b8:	ae 17       	cp	r26, r30
 7ba:	bf 07       	cpc	r27, r31
 7bc:	c8 f3       	brcs	.-14     	; 0x7b0 <strrev+0x10>
 7be:	08 95       	ret

000007c0 <_exit>:
 7c0:	f8 94       	cli

000007c2 <__stop_program>:
 7c2:	ff cf       	rjmp	.-2      	; 0x7c2 <__stop_program>
